#if !FAKE_BUILD_FSPROJ
#load "../Fake/Includes.fsx"
#load "../build-AllLibraries.fsx"
#load "../Meta/AppRenderDslCompiler/build-AppRenderDslCompiler.fsx"
#load "../Meta/AppEggshellCli/build-AppEggshellCli.fsx"
#load "../ThirdParty/Recharts/build-Recharts.fsx"
#load "../ThirdParty/Map/build-Map.fsx"
#load "../LibRouter/build-LibRouter.fsx"
#endif

namespace Egg.Shell.AppEggShellGallery

module Build =
    open Fake.IO
    open Fake.DotNet
    open Fake.Core
    open Egg.Shell.Fake

    type Target =
    | InitializeDependencies
    | Clean
    | RestoreApp
    | EggShellPackageForWeb
    | InstallPackageDependencies

    // TODO: not convinced we should expose eggshell so generically - we might be better off with a DevWeb target, for example. Time will tell.
    | Eggshell of Command: string

    // TODO: don't think we'll need this target, but leaving in for now
    | RunServer of Port: string

    let targetFactory =
        BuildFile.forPath __SOURCE_DIRECTORY__ __SOURCE_FILE__
        |> BuildFile.withTargetsFromUnionType
        |> BuildFile.withDefinition (fun buildContext normalizeDir ->
            function
            | InitializeDependencies ->
                NodeNpm.install buildContext

            | Clean ->
                Shell.rm_rf (normalizeDir "./node_modules")
                Shell.rm_rf (normalizeDir "./src/_autogenerated_")
                Shell.rm_rf (normalizeDir "./src/obj")
                Shell.rm_rf (normalizeDir "./src/bin")
                Shell.rm_rf (normalizeDir Constants.webPackagePath)

            | RestoreApp ->
                DotNetEx.restore (fun restoreOptions ->
                    { restoreOptions with
                        Common =
                            { restoreOptions.Common with
                                Verbosity = Some DotNet.Verbosity.Quiet }
                        Runtime = Some currentDotNetRuntimeIdentifier
                     }) (normalizeDir ".")

            | EggShellPackageForWeb ->
                EggShellCli.packageWeb buildContext

            | InstallPackageDependencies ->
                let buildContext = {
                    buildContext with
                        NormalizePath =
                            fun path ->
                                normalizeDir $"{Constants.webPackagePath}/{path}"
                }
                NodeNpm.install buildContext

            | RunServer port ->
                CreateProcess.fromRawCommandLine "node" "server.js"
                |> CreateProcess.withWorkingDirectory (buildContext.NormalizePath Constants.webPackagePath)
                |> CreateProcess.setEnvironmentVariable "EGGSHELL_HttpPort" port
                |> CreateProcess.ensureExitCode
                |> Proc.run
                |> ignore

            | Eggshell command ->
                EggShellCli.execute buildContext command
            )
        |> BuildFile.withDefaultTarget InitializeDependencies
        |> BuildFile.withExternalDependency Egg.Shell.Meta.AppRenderDslCompiler.Build.targetFactory
            (Egg.Shell.Meta.AppRenderDslCompiler.Build.Target.Link >=> InitializeDependencies)
        |> BuildFile.withExternalDependency Egg.Shell.Meta.AppEggshellCli.Build.targetFactory
            (Egg.Shell.Meta.AppEggshellCli.Build.Build >=> EggShellPackageForWeb)
        |> BuildFile.withInternalDependency (InitializeDependencies >=> EggShellPackageForWeb)
        |> BuildFile.withInternalDependency (RestoreApp >=> EggShellPackageForWeb)
        |> BuildFile.withExternalDependency Egg.Shell.Build.targetFactory
            (Egg.Shell.Build.InitializeDependenciesForAllLibraries >=> EggShellPackageForWeb)
        |> BuildFile.withInternalDependency (EggShellPackageForWeb >=> InstallPackageDependencies)
        |> BuildFile.withExternalDependency Egg.Shell.Meta.AppEggshellCli.Build.targetFactory
            (Egg.Shell.Meta.AppEggshellCli.Build.Build >=> InitializeDependencies)
        |> BuildFile.withExternalDependency Egg.Shell.LibRouter.Build.targetFactory
            (Egg.Shell.LibRouter.Build.EggShellBuildLib >=> InitializeDependencies)
        |> BuildFile.withExternalDependency Egg.Shell.LibClient.Build.targetFactory
            (Egg.Shell.LibClient.Build.EggShellBuildLib >=> InitializeDependencies)
        |> BuildFile.withExternalDependency
            Egg.Shell.ThirdParty.Recharts.Build.targetFactory
            (Egg.Shell.ThirdParty.Recharts.Build.InitializeDependencies
             >=> InitializeDependencies)
        |> BuildFile.withExternalDependency Egg.Shell.ThirdParty.Map.Build.targetFactory
            (Egg.Shell.ThirdParty.Map.Build.EggShellBuildLib >=> InitializeDependencies)
        |> BuildFile.withInternalDependencyBuilder (function | Eggshell _ -> Some InitializeDependencies | RunServer _ -> Some InstallPackageDependencies | _ -> None)
        |> BuildFile.initialize