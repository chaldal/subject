(* AutoGenerated *)
module AppEggShellGallery.ScrapedData

open LibClient
open LibClient.Icons
open Scraping.Types

module Props =
  let private encodedData : string =
      """
{
    "Results": {
        "LibClient.Components.AppGlobalStatus": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.AppShell.Content": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "DesktopSidebarStyle",
                        "DesktopSidebarStyle"
                    ],
                    [
                        "Regular",
                        "Sidebar",
                        "ReactElement"
                    ],
                    [
                        "WithDefault",
                        "TopNav",
                        "ReactElement",
                        "noElement"
                    ],
                    [
                        "Regular",
                        "Content",
                        "ReactElement"
                    ],
                    [
                        "Regular",
                        "Dialogs",
                        "ReactElement"
                    ],
                    [
                        "WithDefault",
                        "BottomNav",
                        "ReactElement",
                        "noElement"
                    ],
                    [
                        "Regular",
                        "OnError",
                        "(System.Exception * (unit -> unit)) -> ReactElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.AppShell.Context": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefault",
                        "children",
                        "ReactElement",
                        "noElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.AppShell.NetworkFailureMessage": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.AppShell.TopLevelErrorMessage": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Error",
                        "System.Exception"
                    ],
                    [
                        "Regular",
                        "Retry",
                        "unit -> unit"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.AppleAppStoreButton": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "OnPress",
                        "ReactEvent.Action -> unit"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Async.Resolve": [
            "Ok",
            {
                "Name": "Props<'T>",
                "Fields": [
                    [
                        "Regular",
                        "Data",
                        "Async<AsyncData<'T>>"
                    ],
                    [
                        "Regular",
                        "WhenAvailable",
                        "('T) -> ReactElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "WhenUninitialized",
                        "(unit -> ReactElement)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "WhenFetching",
                        "((Option<'T>) -> ReactElement)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "WhenFailed",
                        "(AsyncDataFailure -> ReactElement)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "WhenUnavailable",
                        "(unit -> ReactElement)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "WhenElse",
                        "(unit -> ReactElement)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.AsyncData": [
            "Ok",
            {
                "Name": "Props<'T>",
                "Fields": [
                    [
                        "Regular",
                        "Data",
                        "LibClient.AsyncDataModule.AsyncData<'T>"
                    ],
                    [
                        "Regular",
                        "WhenAvailable",
                        "('T) -> ReactElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "WhenUninitialized",
                        "(unit -> ReactElement)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "WhenFetching",
                        "((Option<'T>) -> ReactElement)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "WhenFailed",
                        "(AsyncDataFailure -> ReactElement)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "WhenUnavailable",
                        "(unit -> ReactElement)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "WhenAccessDenied",
                        "(unit -> ReactElement)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "WhenElse",
                        "(unit -> ReactElement)",
                        "None"
                    ]
                ]
            }
        ],
        "LibClient.Components.Avatar": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Source",
                        "LibClient.Services.ImageService.ImageSource"
                    ]
                ]
            }
        ],
        "LibClient.Components.Badge": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Badge",
                        "Output.Badge"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Button": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Label",
                        "string"
                    ],
                    [
                        "WithDefault",
                        "Level",
                        "Level",
                        "Primary"
                    ],
                    [
                        "WithDefault",
                        "Icon",
                        "Icon",
                        "No"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Badge",
                        "Badge",
                        "None"
                    ],
                    [
                        "Regular",
                        "State",
                        "ButtonHighLevelState"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Buttons": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefault",
                        "Align",
                        "Align",
                        "Align.Center"
                    ],
                    [
                        "WithDefault",
                        "children",
                        "ReactElement",
                        "noElement"
                    ]
                ]
            }
        ],
        "LibClient.Components.Card": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefault",
                        "children",
                        "ReactElement",
                        "noElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnPress",
                        "(ReactEvent.Action -> unit)",
                        "None"
                    ],
                    [
                        "WithDefault",
                        "Style",
                        "Style",
                        "Style.Shadowed"
                    ]
                ]
            }
        ],
        "LibClient.Components.Carousel": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Count",
                        "PositiveInteger"
                    ],
                    [
                        "WithDefault",
                        "InitialIndex",
                        "uint32",
                        "0u"
                    ],
                    [
                        "Regular",
                        "Slide",
                        "int -> ReactElement"
                    ],
                    [
                        "WithDefault",
                        "TabIndex",
                        "int",
                        "-1"
                    ],
                    [
                        "WithDefault",
                        "RequestFocusOnMount",
                        "bool",
                        "false"
                    ]
                ]
            }
        ],
        "LibClient.Components.ContextMenu.Dialog": [
            "Error",
            "NoProps"
        ],
        "LibClient.Components.ContextMenu.Popup": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Items",
                        "List<ContextMenuItem>"
                    ],
                    [
                        "Regular",
                        "Hide",
                        "unit -> unit"
                    ],
                    [
                        "Regular",
                        "OpeningEvent",
                        "ReactEvent.Action"
                    ]
                ]
            }
        ],
        "LibClient.Components.DateSelector": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "OnChange",
                        "DateOnly -> unit"
                    ],
                    [
                        "Regular",
                        "MaybeSelected",
                        "Option<DateOnly>"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "MinDate",
                        "DateOnly",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "MaxDate",
                        "DateOnly",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "CanSelectDate",
                        "(DateOnly -> bool)",
                        "None"
                    ]
                ]
            }
        ],
        "LibClient.Components.Dialog.Base": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "CanClose",
                        "CanClose"
                    ],
                    [
                        "Regular",
                        "ContentPosition",
                        "ContentPosition"
                    ],
                    [
                        "WithDefault",
                        "children",
                        "ReactElement",
                        "noElement"
                    ]
                ]
            }
        ],
        "LibClient.Components.Dialog.Confirm": [
            "Error",
            "NoProps"
        ],
        "LibClient.Components.Dialog.ImageViewer": [
            "Error",
            "NoProps"
        ],
        "LibClient.Components.Dialog.Prompt": [
            "Error",
            "NoProps"
        ],
        "LibClient.Components.Dialog.Shell.FullScreen": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Heading",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefault",
                        "BackButton",
                        "BackButton",
                        "BackButton.No"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "BottomSection",
                        "ReactElement",
                        "None"
                    ],
                    [
                        "WithDefault",
                        "Scroll",
                        "Scroll",
                        "Scroll.Vertical"
                    ],
                    [
                        "WithDefault",
                        "children",
                        "ReactElement",
                        "noElement"
                    ]
                ]
            }
        ],
        "LibClient.Components.Dialog.Shell.WhiteRounded.Base": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "CanClose",
                        "CanClose"
                    ],
                    [
                        "WithDefault",
                        "InProgress",
                        "bool",
                        "false"
                    ],
                    [
                        "WithDefault",
                        "children",
                        "ReactElement",
                        "noElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Dialog.Shell.WhiteRounded.Raw": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "CanClose",
                        "CanClose"
                    ],
                    [
                        "WithDefault",
                        "Position",
                        "DialogPosition",
                        "Center"
                    ],
                    [
                        "WithDefault",
                        "children",
                        "ReactElement",
                        "noElement"
                    ],
                    [
                        "WithDefault",
                        "InProgress",
                        "bool",
                        "false"
                    ]
                ]
            }
        ],
        "LibClient.Components.Dialog.Shell.WhiteRounded.Standard": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Heading",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefault",
                        "Body",
                        "ReactElement",
                        "noElement"
                    ],
                    [
                        "WithDefault",
                        "Buttons",
                        "ReactElement",
                        "noElement"
                    ],
                    [
                        "WithDefault",
                        "Mode",
                        "Mode",
                        "Default"
                    ],
                    [
                        "Regular",
                        "CanClose",
                        "CanClose"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Draggable": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Left",
                        "DragTarget",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Right",
                        "DragTarget",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Up",
                        "DragTarget",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Down",
                        "DragTarget",
                        "None"
                    ],
                    [
                        "WithDefault",
                        "BaseOffset",
                        "int * int",
                        "(0, 0)"
                    ],
                    [
                        "WithDefault",
                        "children",
                        "ReactElement",
                        "noElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnChange",
                        "(Change -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "ref",
                        "(LibClient.JsInterop.JsNullable<IDraggableRef> -> unit)",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.DueDateTag": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "DueOn",
                        "UniDateTime"
                    ],
                    [
                        "WithDefault",
                        "Format",
                        "string",
                        "\"dd MM yy\""
                    ]
                ]
            }
        ],
        "LibClient.Components.ErrorBoundary": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Try",
                        "ReactElement"
                    ],
                    [
                        "Regular",
                        "Catch",
                        "(System.Exception * (unit -> unit)) -> ReactElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Executor.AlertErrors": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "With",
                        "MakeExecutor -> ReactElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "ShowTopLevelSpinnerForKeys",
                        "ShowTopLevelSpinnerForKeys",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Executor.DisplayErrorsManually": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Content",
                        "(MakeExecutor * ExecutorErrorsLazy) -> ReactElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "ShowTopLevelSpinnerForKeys",
                        "ShowTopLevelSpinnerForKeys",
                        "None"
                    ],
                    [
                        "WithDefault",
                        "ShouldBeActionableWhenDisplayingErrors",
                        "bool",
                        "true"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.FlexFiller": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefault",
                        "HackWeDoNotSupportProplessComponents",
                        "bool",
                        "true"
                    ]
                ]
            }
        ],
        "LibClient.Components.FloatingActionButton": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Icon",
                        "LibClient.Icons.IconConstructor"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Label",
                        "string",
                        "None"
                    ],
                    [
                        "Regular",
                        "State",
                        "ButtonHighLevelState"
                    ]
                ]
            }
        ],
        "LibClient.Components.ForceContext": [
            "Ok",
            {
                "Name": "Props<'T>",
                "Fields": [
                    [
                        "Regular",
                        "Context",
                        "IContext<'T>"
                    ],
                    [
                        "Regular",
                        "Value",
                        "'T"
                    ],
                    [
                        "WithDefault",
                        "children",
                        "ReactElement",
                        "noElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Form.Base": [
            "Ok",
            {
                "Name": "Props<'Field, 'Acc, 'Acced when 'Field: comparison and 'Acc :> AbstractAcc<'Field, 'Acced>>",
                "Fields": [
                    [
                        "Regular",
                        "Accumulator",
                        "Accumulator<'Acc>"
                    ],
                    [
                        "Regular",
                        "Submit",
                        "'Acced -> ReactEvent.Action -> UDAction"
                    ],
                    [
                        "Regular",
                        "Content",
                        "FormHandle<'Field, 'Acc, 'Acced> -> ReactElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Executor",
                        "MakeExecutor",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.FormFieldsDivider": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefault",
                        "WeDoNotSupportProplessComponents",
                        "bool",
                        "true"
                    ]
                ]
            }
        ],
        "LibClient.Components.GooglePlayStoreButton": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "OnPress",
                        "ReactEvent.Action -> unit"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.HandheldListItem": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Label",
                        "Label"
                    ],
                    [
                        "Regular",
                        "State",
                        "State"
                    ],
                    [
                        "WithDefault",
                        "LeftIcon",
                        "(int -> LibClient.Icons.Icon) option",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Right",
                        "Right",
                        "None"
                    ],
                    [
                        "WithDefault",
                        "children",
                        "ReactElement",
                        "noElement"
                    ]
                ]
            }
        ],
        "LibClient.Components.HeaderCell": [
            "Ok",
            {
                "Name": "Props<'T>",
                "Fields": [
                    [
                        "Regular",
                        "Label",
                        "string"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Sort",
                        "( (* field *) 'T * (* currentSort *) ('T * SortDirection) * (* setSort *) ('T * SortDirection -> unit))",
                        "None"
                    ]
                ]
            }
        ],
        "LibClient.Components.Heading": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefault",
                        "Level",
                        "Level",
                        "Primary"
                    ],
                    [
                        "WithDefault",
                        "children",
                        "ReactElement",
                        "noElement"
                    ]
                ]
            }
        ],
        "LibClient.Components.Icon": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Icon",
                        "LibClient.Icons.IconConstructor"
                    ]
                ]
            }
        ],
        "LibClient.Components.IconButton": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "State",
                        "ButtonHighLevelState"
                    ],
                    [
                        "Regular",
                        "Icon",
                        "LibClient.Icons.IconConstructor"
                    ]
                ]
            }
        ],
        "LibClient.Components.IconWithBadge": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Icon",
                        "LibClient.Icons.IconConstructor"
                    ],
                    [
                        "Regular",
                        "Badge",
                        "Badge"
                    ]
                ]
            }
        ],
        "LibClient.Components.ImageCard": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Source",
                        "LibClient.Services.ImageService.ImageSource"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Label",
                        "Label",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnPress",
                        "(ReactEvent.Action -> unit)",
                        "None"
                    ],
                    [
                        "WithDefault",
                        "children",
                        "ReactElement",
                        "noElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.ImageCarousel": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Something",
                        "int"
                    ]
                ]
            }
        ],
        "LibClient.Components.InfoMessage": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefault",
                        "Level",
                        "Level",
                        "Level.Info"
                    ],
                    [
                        "Regular",
                        "Message",
                        "string"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Input.Checkbox": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "OnChange",
                        "bool -> unit"
                    ],
                    [
                        "Regular",
                        "Value",
                        "Option<bool>"
                    ],
                    [
                        "WithDefault",
                        "Label",
                        "Label",
                        "Children"
                    ],
                    [
                        "WithDefault",
                        "children",
                        "ReactElement",
                        "noElement"
                    ],
                    [
                        "Regular",
                        "Validity",
                        "InputValidity"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Input.ChoiceList": [
            "Ok",
            {
                "Name": "Props<'T when 'T : comparison>",
                "Fields": [
                    [
                        "Regular",
                        "Items",
                        "Group<'T> -> ReactElement"
                    ],
                    [
                        "Regular",
                        "Value",
                        "SelectableValue<'T>"
                    ],
                    [
                        "Regular",
                        "Validity",
                        "InputValidity"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Input.ChoiceListItem": [
            "Ok",
            {
                "Name": "Props<'T when 'T : comparison>",
                "Fields": [
                    [
                        "Regular",
                        "Value",
                        "'T"
                    ],
                    [
                        "WithDefault",
                        "Label",
                        "Label",
                        "Children"
                    ],
                    [
                        "WithDefault",
                        "children",
                        "ReactElement",
                        "noElement"
                    ],
                    [
                        "Regular",
                        "Group",
                        "LibClient.Components.Input.ChoiceList.Group<'T>"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LC.Input.Date": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Label",
                        "string",
                        "None"
                    ],
                    [
                        "Regular",
                        "Value",
                        "Value"
                    ],
                    [
                        "WithDefault",
                        "ValueFormat",
                        "string",
                        "\"dd/MM/yyyy\""
                    ],
                    [
                        "Regular",
                        "Validity",
                        "InputValidity"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Placeholder",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefault",
                        "RequestFocusOnMount",
                        "bool",
                        "false"
                    ],
                    [
                        "Regular",
                        "OnChange",
                        "Value -> unit"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnKeyPress",
                        "(Browser.Types.KeyboardEvent -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnEnterKeyPress",
                        "(ReactEvent.Keyboard -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "MinDate",
                        "DateOnly",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "MaxDate",
                        "DateOnly",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "CanSelectDate",
                        "(DateOnly -> bool)",
                        "None"
                    ]
                ]
            }
        ],
        "LibClient.Components.Input.DayOfTheWeek": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Label",
                        "string",
                        "None"
                    ],
                    [
                        "Regular",
                        "Mode",
                        "Mode"
                    ],
                    [
                        "Regular",
                        "Validity",
                        "InputValidity"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Input.Decimal": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Label",
                        "string",
                        "None"
                    ],
                    [
                        "Regular",
                        "Value",
                        "Value"
                    ],
                    [
                        "Regular",
                        "Validity",
                        "InputValidity"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Placeholder",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Prefix",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Suffix",
                        "InputSuffix",
                        "None"
                    ],
                    [
                        "WithDefault",
                        "RequestFocusOnMount",
                        "bool",
                        "false"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "TabIndex",
                        "int",
                        "None"
                    ],
                    [
                        "Regular",
                        "OnChange",
                        "Value -> unit"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnKeyPress",
                        "(Browser.Types.KeyboardEvent -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnEnterKeyPress",
                        "(ReactEvent.Keyboard                -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Input.Duration": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Label",
                        "string",
                        "None"
                    ],
                    [
                        "Regular",
                        "Value",
                        "Value"
                    ],
                    [
                        "Regular",
                        "Validity",
                        "InputValidity"
                    ],
                    [
                        "Regular",
                        "OnChange",
                        "Value -> unit"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnEnterKeyPress",
                        "(ReactEvent.Keyboard -> unit)",
                        "None"
                    ],
                    [
                        "WithDefault",
                        "RequestFocusOnMount",
                        "bool",
                        "false"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Input.EmailAddress": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Label",
                        "string",
                        "None"
                    ],
                    [
                        "Regular",
                        "Value",
                        "Value"
                    ],
                    [
                        "Regular",
                        "Validity",
                        "InputValidity"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Placeholder",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Prefix",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Suffix",
                        "InputSuffix",
                        "None"
                    ],
                    [
                        "WithDefault",
                        "RequestFocusOnMount",
                        "bool",
                        "false"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "TabIndex",
                        "int",
                        "None"
                    ],
                    [
                        "Regular",
                        "OnChange",
                        "Value -> unit"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnKeyPress",
                        "(Browser.Types.KeyboardEvent -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnEnterKeyPress",
                        "(ReactEvent.Keyboard                -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Input.File": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Value",
                        "list<LibLifeCycleFile>"
                    ],
                    [
                        "Regular",
                        "Validity",
                        "InputValidity"
                    ],
                    [
                        "Regular",
                        "OnChange",
                        "Result<list<LibLifeCycleFile>, string> -> unit"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "MaxFileCount",
                        "Positive.PositiveInteger",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "MaxFileSize",
                        "int<KB>",
                        "None"
                    ],
                    [
                        "WithDefault",
                        "AcceptedTypes",
                        "Set<AcceptedType>",
                        "Set.empty"
                    ],
                    [
                        "WithDefault",
                        "SelectionMode",
                        "SelectionMode",
                        "ReplacedExisting"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Input.Image": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Value",
                        "list<File>"
                    ],
                    [
                        "Regular",
                        "Validity",
                        "InputValidity"
                    ],
                    [
                        "Regular",
                        "OnChange",
                        "Result<list<File>, string> -> unit"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "MaxFileCount",
                        "Positive.PositiveInteger",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "MaxFileSize",
                        "int<KB>",
                        "None"
                    ],
                    [
                        "WithDefault",
                        "ShowPreview",
                        "bool",
                        "true"
                    ],
                    [
                        "WithDefault",
                        "SelectionMode",
                        "SelectionMode",
                        "ReplacedExisting"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Input.LocalTime": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Label",
                        "string",
                        "None"
                    ],
                    [
                        "Regular",
                        "Value",
                        "Value"
                    ],
                    [
                        "Regular",
                        "Validity",
                        "InputValidity"
                    ],
                    [
                        "Regular",
                        "OnChange",
                        "Value -> unit"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnEnterKeyPress",
                        "(ReactEvent.Keyboard -> unit)",
                        "None"
                    ],
                    [
                        "WithDefault",
                        "RequestFocusOnMount",
                        "bool",
                        "false"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Input.ParsedText": [
            "Ok",
            {
                "Name": "Props<'T>",
                "Fields": [
                    [
                        "Regular",
                        "Parse",
                        "Option<NonemptyString> -> Result<Option<'T>, string>"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Label",
                        "string",
                        "None"
                    ],
                    [
                        "Regular",
                        "Value",
                        "Value<'T>"
                    ],
                    [
                        "Regular",
                        "Validity",
                        "InputValidity"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Placeholder",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Prefix",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Suffix",
                        "InputSuffix",
                        "None"
                    ],
                    [
                        "WithDefault",
                        "Editable",
                        "bool",
                        "true"
                    ],
                    [
                        "Regular",
                        "RequestFocusOnMount",
                        "bool"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "TabIndex",
                        "int",
                        "None"
                    ],
                    [
                        "Regular",
                        "OnChange",
                        "Value<'T> -> unit"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnKeyPress",
                        "(Browser.Types.KeyboardEvent -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnEnterKeyPress",
                        "(ReactEvent.Keyboard                -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Input.PhoneNumber": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Label",
                        "string",
                        "None"
                    ],
                    [
                        "Regular",
                        "Value",
                        "Value"
                    ],
                    [
                        "Regular",
                        "Validity",
                        "InputValidity"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Placeholder",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Prefix",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Suffix",
                        "InputSuffix",
                        "None"
                    ],
                    [
                        "WithDefault",
                        "RequestFocusOnMount",
                        "bool",
                        "false"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "TabIndex",
                        "int",
                        "None"
                    ],
                    [
                        "Regular",
                        "OnChange",
                        "Value -> unit"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnKeyPress",
                        "(Browser.Types.KeyboardEvent -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnEnterKeyPress",
                        "(ReactEvent.Keyboard                -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Input.Picker": [
            "Ok",
            {
                "Name": "Props<'T when 'T : comparison>",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Label",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Placeholder",
                        "string",
                        "None"
                    ],
                    [
                        "Regular",
                        "Items",
                        "Items<'T>"
                    ],
                    [
                        "Regular",
                        "ItemView",
                        "PickerItemView<'T>"
                    ],
                    [
                        "Regular",
                        "Value",
                        "SelectableValue<'T>"
                    ],
                    [
                        "Regular",
                        "Validity",
                        "InputValidity"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Input.PickerInternals.Base": [
            "Ok",
            {
                "Name": "Props<'Item when 'Item : comparison>",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Label",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Placeholder",
                        "string",
                        "None"
                    ],
                    [
                        "Regular",
                        "Items",
                        "Items<'Item>"
                    ],
                    [
                        "Regular",
                        "ItemView",
                        "PickerItemView<'Item>"
                    ],
                    [
                        "Regular",
                        "Value",
                        "SelectableValue<'Item>"
                    ],
                    [
                        "Regular",
                        "Validity",
                        "InputValidity"
                    ],
                    [
                        "Regular",
                        "ScreenSize",
                        "ScreenSize"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Input.PickerInternals.Dialog": [
            "Error",
            "NoProps"
        ],
        "LibClient.Components.Input.PickerInternals.Field": [
            "Ok",
            {
                "Name": "Props<'Item when 'Item : comparison>",
                "Fields": [
                    [
                        "Regular",
                        "Model",
                        "PickerModel<'Item>"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Label",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Placeholder",
                        "string",
                        "None"
                    ],
                    [
                        "Regular",
                        "Value",
                        "SelectableValue<'Item>"
                    ],
                    [
                        "Regular",
                        "Validity",
                        "InputValidity"
                    ],
                    [
                        "Regular",
                        "ItemView",
                        "PickerItemView<'Item>"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Input.PickerInternals.Popup": [
            "Ok",
            {
                "Name": "Props<'Item when 'Item : comparison>",
                "Fields": [
                    [
                        "Regular",
                        "Model",
                        "PickerModel<'Item>"
                    ],
                    [
                        "Regular",
                        "ItemView",
                        "PickerItemView<'Item>"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Input.PositiveDecimal": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Label",
                        "string",
                        "None"
                    ],
                    [
                        "Regular",
                        "Value",
                        "Value"
                    ],
                    [
                        "Regular",
                        "Validity",
                        "InputValidity"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Placeholder",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Prefix",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Suffix",
                        "InputSuffix",
                        "None"
                    ],
                    [
                        "WithDefault",
                        "RequestFocusOnMount",
                        "bool",
                        "false"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "TabIndex",
                        "int",
                        "None"
                    ],
                    [
                        "Regular",
                        "OnChange",
                        "Value -> unit"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnKeyPress",
                        "(Browser.Types.KeyboardEvent -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnEnterKeyPress",
                        "(ReactEvent.Keyboard                -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Input.PositiveInteger": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Label",
                        "string",
                        "None"
                    ],
                    [
                        "Regular",
                        "Value",
                        "Value"
                    ],
                    [
                        "Regular",
                        "Validity",
                        "InputValidity"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Placeholder",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Prefix",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Suffix",
                        "InputSuffix",
                        "None"
                    ],
                    [
                        "WithDefault",
                        "Editable",
                        "bool",
                        "true"
                    ],
                    [
                        "WithDefault",
                        "RequestFocusOnMount",
                        "bool",
                        "false"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "TabIndex",
                        "int",
                        "None"
                    ],
                    [
                        "Regular",
                        "OnChange",
                        "Value -> unit"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnKeyPress",
                        "(Browser.Types.KeyboardEvent -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnEnterKeyPress",
                        "(ReactEvent.Keyboard         -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Input.Quantity": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Value",
                        "Option<PositiveInteger>"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Max",
                        "PositiveInteger",
                        "None"
                    ],
                    [
                        "Regular",
                        "Validity",
                        "InputValidity"
                    ],
                    [
                        "Regular",
                        "OnChange",
                        "OnChange"
                    ]
                ]
            }
        ],
        "LibClient.Components.Input.Text": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Value",
                        "Option<NonemptyString>"
                    ],
                    [
                        "Regular",
                        "OnChange",
                        "Option<NonemptyString>       -> unit"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Label",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnKeyPress",
                        "(Browser.Types.KeyboardEvent -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnEnterKeyPress",
                        "(ReactEvent.Keyboard         -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnFocus",
                        "(Browser.Types.FocusEvent    -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnBlur",
                        "(Browser.Types.FocusEvent    -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Placeholder",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Prefix",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Suffix",
                        "InputSuffix",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "MaxLength",
                        "int",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "TabIndex",
                        "int",
                        "None"
                    ],
                    [
                        "WithDefault",
                        "Editable",
                        "bool",
                        "true"
                    ],
                    [
                        "WithDefault",
                        "Multiline",
                        "bool",
                        "false"
                    ],
                    [
                        "WithDefault",
                        "RequestFocusOnMount",
                        "bool",
                        "false"
                    ],
                    [
                        "WithDefault",
                        "SecureTextEntry",
                        "bool",
                        "false"
                    ],
                    [
                        "Regular",
                        "Validity",
                        "InputValidity"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "ref",
                        "(LibClient.JsInterop.JsNullable<ITextRef> -> unit)",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Input.UnsignedDecimal": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Label",
                        "string",
                        "None"
                    ],
                    [
                        "Regular",
                        "Value",
                        "Value"
                    ],
                    [
                        "Regular",
                        "Validity",
                        "InputValidity"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Placeholder",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Prefix",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Suffix",
                        "InputSuffix",
                        "None"
                    ],
                    [
                        "WithDefault",
                        "RequestFocusOnMount",
                        "bool",
                        "false"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "TabIndex",
                        "int",
                        "None"
                    ],
                    [
                        "Regular",
                        "OnChange",
                        "Value -> unit"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnKeyPress",
                        "(Browser.Types.KeyboardEvent -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnEnterKeyPress",
                        "(ReactEvent.Keyboard                -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Input.UnsignedInteger": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Label",
                        "string",
                        "None"
                    ],
                    [
                        "Regular",
                        "Value",
                        "Value"
                    ],
                    [
                        "Regular",
                        "Validity",
                        "InputValidity"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Placeholder",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Prefix",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Suffix",
                        "InputSuffix",
                        "None"
                    ],
                    [
                        "WithDefault",
                        "RequestFocusOnMount",
                        "bool",
                        "false"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "TabIndex",
                        "int",
                        "None"
                    ],
                    [
                        "Regular",
                        "OnChange",
                        "Value -> unit"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnKeyPress",
                        "(Browser.Types.KeyboardEvent -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnEnterKeyPress",
                        "(ReactEvent.Keyboard         -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Input.WeeklyCalendar": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Label",
                        "string",
                        "None"
                    ],
                    [
                        "Regular",
                        "Value",
                        "Set<Date>"
                    ],
                    [
                        "Regular",
                        "OnChange",
                        "Set<Date> -> unit"
                    ],
                    [
                        "Regular",
                        "Validity",
                        "InputValidity"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "StartDate",
                        "Date",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.ItemList": [
            "Ok",
            {
                "Name": "Props<'T>",
                "Fields": [
                    [
                        "Regular",
                        "Items",
                        "seq<'T>"
                    ],
                    [
                        "Regular",
                        "WhenNonempty",
                        "seq<'T> -> ReactElement"
                    ],
                    [
                        "Regular",
                        "Style",
                        "Style"
                    ],
                    [
                        "WithDefault",
                        "WhenEmpty",
                        "WhenEmpty",
                        "WhenEmpty.Message \"No Items\""
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "SeeAll",
                        "SeeAll",
                        "None"
                    ]
                ]
            }
        ],
        "LibClient.Components.LabelledFormField": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Label",
                        "string"
                    ],
                    [
                        "WithDefault",
                        "children",
                        "ReactElement",
                        "noElement"
                    ]
                ]
            }
        ],
        "LibClient.Components.LabelledValue": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Label",
                        "string"
                    ],
                    [
                        "WithDefault",
                        "children",
                        "ReactElement",
                        "noElement"
                    ]
                ]
            }
        ],
        "LibClient.Components.Legacy.Input.Picker": [
            "Ok",
            {
                "Name": "Props<'T>",
                "Fields": [
                    [
                        "Regular",
                        "Items",
                        "List<PickerItem<'T>>"
                    ],
                    [
                        "Regular",
                        "Value",
                        "Option<SelectedItem<'T>>"
                    ],
                    [
                        "Regular",
                        "OnChange",
                        "OnChange<'T>"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Label",
                        "string",
                        "None"
                    ],
                    [
                        "Regular",
                        "Validity",
                        "InputValidity"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Legacy.Input.PositiveInteger": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "InitialValue",
                        "Positive.PositiveInteger",
                        "None"
                    ],
                    [
                        "Regular",
                        "OnChange",
                        "Result<Positive.PositiveInteger, InputValidationError> -> unit"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnKeyPress",
                        "(Browser.Types.KeyboardEvent -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "ref",
                        "(LibClient.JsInterop.JsNullable<InputPositiveIntegerRef> -> unit)",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Legacy.Sidebar.Filler": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefault",
                        "HackWeDoNotSupportProplessComponents",
                        "bool",
                        "true"
                    ]
                ]
            }
        ],
        "LibClient.Components.Legacy.Sidebar.Item": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Value",
                        "Value"
                    ],
                    [
                        "Regular",
                        "IsSelected",
                        "bool"
                    ],
                    [
                        "Regular",
                        "OnPress",
                        "(ReactEvent.Action -> unit)"
                    ]
                ]
            }
        ],
        "LibClient.Components.Legacy.TopNav.Base": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefault",
                        "Left",
                        "ReactElement",
                        "noElement"
                    ],
                    [
                        "Regular",
                        "Center",
                        "Center"
                    ],
                    [
                        "WithDefault",
                        "children",
                        "ReactElement",
                        "noElement"
                    ],
                    [
                        "WithDefault",
                        "Right",
                        "ReactElement",
                        "noElement"
                    ]
                ]
            }
        ],
        "LibClient.Components.Legacy.TopNav.Filler": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefault",
                        "Count",
                        "int",
                        "1"
                    ]
                ]
            }
        ],
        "LibClient.Components.Legacy.TopNav.IconButton": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "State",
                        "State"
                    ],
                    [
                        "Regular",
                        "Icon",
                        "LibClient.Icons.IconConstructor"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Legacy.TopNav.ShowSidebarButton": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "OnlyOnHandheld",
                        "bool"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Money": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Value",
                        "Value"
                    ],
                    [
                        "WithDefault",
                        "Format",
                        "Format",
                        "Format.WithThousandSeparator 2"
                    ],
                    [
                        "Regular",
                        "Symbol",
                        "Symbol"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Nav.Bottom.Base": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Handheld",
                        "unit -> ReactElement"
                    ],
                    [
                        "Regular",
                        "Desktop",
                        "unit -> ReactElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Nav.Bottom.Button": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Label",
                        "string"
                    ],
                    [
                        "WithDefault",
                        "Level",
                        "Level",
                        "Primary"
                    ],
                    [
                        "WithDefault",
                        "Icon",
                        "Icon",
                        "No"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Badge",
                        "Badge",
                        "None"
                    ],
                    [
                        "Regular",
                        "State",
                        "ButtonHighLevelState"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Nav.Bottom.Filler": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Nav.Bottom.Item": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "State",
                        "State"
                    ],
                    [
                        "Regular",
                        "Style",
                        "Style"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Nav.Top.Base": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Handheld",
                        "unit -> ReactElement"
                    ],
                    [
                        "Regular",
                        "Desktop",
                        "unit -> ReactElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Nav.Top.Filler": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Nav.Top.Heading": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Text",
                        "string"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Nav.Top.Image": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Source",
                        "LibClient.Services.ImageService.ImageSource"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Nav.Top.Item": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "State",
                        "State"
                    ],
                    [
                        "Regular",
                        "Style",
                        "Style"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Nav.Top.ShowSidebarButton": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Pointer.State": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Content",
                        "PointerState -> ReactElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Popup": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Render",
                        "unit -> ReactElement"
                    ],
                    [
                        "Regular",
                        "Connector",
                        "Connector"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Id",
                        "string",
                        "None"
                    ]
                ]
            }
        ],
        "LibClient.Components.Pre": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefault",
                        "children",
                        "ReactElement",
                        "noElement"
                    ]
                ]
            }
        ],
        "LibClient.Components.QuadStateful": [
            "Ok",
            {
                "Name": "Props<'InputAcc, 'Input>",
                "Fields": [
                    [
                        "Regular",
                        "InitialInputAcc",
                        "InitialInputAcc<'InputAcc>"
                    ],
                    [
                        "Regular",
                        "Act",
                        "'Input -> Async<Result<unit, string>>"
                    ],
                    [
                        "Regular",
                        "Validate",
                        "'InputAcc -> Option<'Input>"
                    ],
                    [
                        "Regular",
                        "Initial",
                        "((* Edit *) ReactEvent.Action -> unit) -> ReactElement"
                    ],
                    [
                        "Regular",
                        "Input",
                        "('InputAcc * ((* SetInput *) 'InputAcc -> unit) * (* MaybeAct *) Option<ReactEvent.Action -> unit> * (* Cancel *) (ReactEvent.Action -> unit)) -> ReactElement"
                    ]
                ]
            }
        ],
        "LibClient.Components.Responsive": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Desktop",
                        "LibClient.Responsive.ScreenSize -> ReactElement"
                    ],
                    [
                        "Regular",
                        "Handheld",
                        "LibClient.Responsive.ScreenSize -> ReactElement"
                    ]
                ]
            }
        ],
        "LibClient.Components.Scrim": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "IsVisible",
                        "bool"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnPress",
                        "(ReactEvent.Action -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnPanVertical",
                        "(ReactXP.Components.GestureView.PanGestureState -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnPanHorizontal",
                        "(ReactXP.Components.GestureView.PanGestureState -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.ScrollView": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Scroll",
                        "Scroll"
                    ],
                    [
                        "Regular",
                        "RestoreScroll",
                        "RestoreScroll"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnLayout",
                        "(ReactXP.Types.ViewOnLayoutEvent -> unit)",
                        "None"
                    ],
                    [
                        "WithDefault",
                        "children",
                        "ReactElement",
                        "noElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "ref",
                        "(LibClient.JsInterop.JsNullable<IScrollViewComponentRef> -> unit)",
                        "Undefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Section.Padded": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefault",
                        "children",
                        "ReactElement",
                        "noElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.SetPageMetadata": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Title",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Description",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Sidebar.Base": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefault",
                        "FixedTop",
                        "ReactElement",
                        "noElement"
                    ],
                    [
                        "WithDefault",
                        "FixedBottom",
                        "ReactElement",
                        "noElement"
                    ],
                    [
                        "WithDefault",
                        "ScrollableMiddle",
                        "ReactElement",
                        "noElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Sidebar.Divider": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Sidebar.Heading": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Text",
                        "string"
                    ],
                    [
                        "WithDefault",
                        "Level",
                        "Level",
                        "Level.Primary"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Sidebar.Item": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Label",
                        "string"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "LeftIcon",
                        "Icons.IconConstructor",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Right",
                        "Right",
                        "None"
                    ],
                    [
                        "Regular",
                        "State",
                        "State"
                    ]
                ]
            }
        ],
        "LibClient.Components.Sidebar.WithClose": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "With",
                        "(ReactEvent.Action -> unit) -> ReactElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Stars": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Count",
                        "int"
                    ],
                    [
                        "WithDefault",
                        "Total",
                        "int",
                        "5"
                    ]
                ]
            }
        ],
        "LibClient.Components.Subscribe": [
            "Ok",
            {
                "Name": "Props<'T>",
                "Fields": [
                    [
                        "Regular",
                        "Subscription",
                        "(LibClient.AsyncDataModule.AsyncData<'T> -> unit) -> SubscribeResult"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "SubscriptionKey",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefault",
                        "OnSubscriptionKeyChange",
                        "OnSubscriptionKeyChange",
                        "OnSubscriptionKeyChange.ShowCurrentDataAsFetching"
                    ],
                    [
                        "Regular",
                        "With",
                        "With<'T>"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Tab": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Label",
                        "string"
                    ],
                    [
                        "Regular",
                        "State",
                        "State"
                    ]
                ]
            }
        ],
        "LibClient.Components.Tabs": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefault",
                        "children",
                        "ReactElement",
                        "noElement"
                    ]
                ]
            }
        ],
        "LibClient.Components.Tag": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Text",
                        "string"
                    ],
                    [
                        "WithDefault",
                        "State",
                        "State",
                        "State.ViewOnly"
                    ],
                    [
                        "WithDefault",
                        "IsSelected",
                        "bool",
                        "false"
                    ]
                ]
            }
        ],
        "LibClient.Components.Tags": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefault",
                        "children",
                        "ReactElement",
                        "noElement"
                    ]
                ]
            }
        ],
        "LibClient.Components.TapCapture": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "OnPress",
                        "ReactEvent.Action -> unit"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnHoverStart",
                        "(Browser.Types.PointerEvent -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnHoverEnd",
                        "(Browser.Types.PointerEvent -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnPressIn",
                        "(Browser.Types.PointerEvent -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnPressOut",
                        "(Browser.Types.PointerEvent -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "PointerState",
                        "LibClient.Components.Pointer.State.PointerState",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Text": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "selectable",
                        "bool",
                        "(Some true)"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "numberOfLines",
                        "int",
                        "Undefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "allowFontScaling",
                        "bool",
                        "Undefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "maxContentSizeMultiplier",
                        "float",
                        "Undefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "ellipsizeMode",
                        "EllipsizeMode",
                        "Undefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "textBreakStrategy",
                        "TextBreakStrategy",
                        "Undefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "importantForAccessibility",
                        "ImportantForAccessibility",
                        "Undefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "accessibilityId",
                        "string",
                        "Undefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "autoFocus",
                        "bool",
                        "Undefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "onPress",
                        "(PointerEvent -> unit)",
                        "Undefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "id",
                        "string",
                        "Undefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "onContextMenu",
                        "(MouseEvent -> unit)",
                        "Undefined"
                    ],
                    [
                        "WithDefault",
                        "children",
                        "ReactElement",
                        "noElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.TextButton": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "State",
                        "ButtonHighLevelState"
                    ],
                    [
                        "Regular",
                        "Label",
                        "string"
                    ],
                    [
                        "WithDefault",
                        "Level",
                        "Level",
                        "Primary"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.TextInputWithIcon": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Icon",
                        "int -> LibClient.Icons.Icon"
                    ],
                    [
                        "WithDefault",
                        "IconSize",
                        "int",
                        "26"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Placeholder",
                        "string",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "PlaceholderTextColor",
                        "Color",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnChangeText",
                        "(string -> unit)",
                        "None"
                    ]
                ]
            }
        ],
        "LibClient.Components.TheBomb": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Thumb": [
            "Ok",
            {
                "Name": "Props<'T>",
                "Fields": [
                    [
                        "Regular",
                        "For",
                        "For<'T>"
                    ],
                    [
                        "WithDefault",
                        "IsSelected",
                        "bool",
                        "false"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnPress",
                        "(ReactEvent.Action -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.Thumbs": [
            "Ok",
            {
                "Name": "Props<'T when 'T : comparison>",
                "Fields": [
                    [
                        "Regular",
                        "For",
                        "For<'T>"
                    ],
                    [
                        "WithDefault",
                        "Selected",
                        "Set<'T>",
                        "Set.empty"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnPress",
                        "('T -> uint32 -> ReactEvent.Action -> unit)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.TimeSpan": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Value",
                        "System.TimeSpan"
                    ],
                    [
                        "WithDefault",
                        "ShouldTruncateMillis",
                        "bool",
                        "true"
                    ]
                ]
            }
        ],
        "LibClient.Components.Timestamp": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Value",
                        "UniDateTime"
                    ],
                    [
                        "WithDefault",
                        "Format",
                        "string",
                        "\"yyyy-MM-dd HH:mm:ss\""
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Offset",
                        "System.TimeSpan",
                        "None"
                    ],
                    [
                        "WithDefault",
                        "Selectable",
                        "bool",
                        "false"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.ToggleButton": [
            "Ok",
            {
                "Name": "Props<'T>",
                "Fields": [
                    [
                        "Regular",
                        "Style",
                        "Style"
                    ],
                    [
                        "Regular",
                        "Value",
                        "'T"
                    ],
                    [
                        "Regular",
                        "Group",
                        "ToggleButtons.Group<'T>"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.ToggleButtons": [
            "Ok",
            {
                "Name": "Props<'T when 'T : comparison>",
                "Fields": [
                    [
                        "Regular",
                        "Value",
                        "SelectableValue<'T>"
                    ],
                    [
                        "Regular",
                        "Buttons",
                        "Group<'T> -> ReactElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.TriStateful.Abstract": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Content",
                        "(Mode * (* runAction *) RunAction * (* reset *) (ReactEvent.Action -> unit)) -> ReactElement"
                    ]
                ]
            }
        ],
        "LibClient.Components.TriStateful.Simple": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Content",
                        "(* runAction *) (Async<Result<unit, string>> -> unit) -> ReactElement"
                    ]
                ]
            }
        ],
        "LibClient.Components.TwoWayScrollable": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefault",
                        "HorizontalOnly",
                        "ReactElement",
                        "noElement"
                    ],
                    [
                        "Regular",
                        "Both",
                        "ReactElement"
                    ]
                ]
            }
        ],
        "LibClient.Components.UiText": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "selectable",
                        "bool",
                        "(Some false)"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "numberOfLines",
                        "int",
                        "Undefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "allowFontScaling",
                        "bool",
                        "Undefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "maxContentSizeMultiplier",
                        "float",
                        "Undefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "ellipsizeMode",
                        "EllipsizeMode",
                        "Undefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "textBreakStrategy",
                        "TextBreakStrategy",
                        "Undefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "importantForAccessibility",
                        "ImportantForAccessibility",
                        "Undefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "accessibilityId",
                        "string",
                        "Undefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "autoFocus",
                        "bool",
                        "Undefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "onPress",
                        "(PointerEvent -> unit)",
                        "Undefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "id",
                        "string",
                        "Undefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "onContextMenu",
                        "(MouseEvent -> unit)",
                        "Undefined"
                    ],
                    [
                        "WithDefault",
                        "children",
                        "ReactElement",
                        "noElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.VerticallyScrollable": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "FixedTop",
                        "ReactElement",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "FixedBottom",
                        "ReactElement",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "ScrollableMiddle",
                        "ReactElement",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.VirtualListView": [
            "Ok",
            {
                "Name": "Props<'Item>",
                "Fields": [
                    [
                        "Regular",
                        "Items",
                        "seq<VirtualListItem<'Item>>"
                    ],
                    [
                        "Regular",
                        "Render",
                        "'Item -> ReactElement"
                    ],
                    [
                        "Regular",
                        "RestoreScroll",
                        "RestoreScroll"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.With.Context": [
            "Ok",
            {
                "Name": "Props<'T>",
                "Fields": [
                    [
                        "Regular",
                        "Context",
                        "IContext<'T>"
                    ],
                    [
                        "Regular",
                        "With",
                        "('T) -> ReactElement"
                    ]
                ]
            }
        ],
        "LibClient.Components.With.DataFlowControl": [
            "Ok",
            {
                "Name": "Props<'T>",
                "Fields": [
                    [
                        "Regular",
                        "Data",
                        "'T"
                    ],
                    [
                        "Regular",
                        "DataFlowPolicy",
                        "DataFlowPolicy"
                    ],
                    [
                        "Regular",
                        "With",
                        "'T -> ReactElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.With.Geolocation": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "With",
                        "Option<LatLng> -> ReactElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.With.GlobalDataFlowControl.Context": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "With",
                        "Control -> ReactElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.With.GlobalDataFlowControl.Get": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Key",
                        "string"
                    ],
                    [
                        "Regular",
                        "With",
                        "LibClient.Components.With.DataFlowControl.DataFlowPolicy -> ReactElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.With.GlobalExecutor": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "With",
                        "MakeExecutor -> ReactElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.With.Layout": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "With",
                        "((* OnLayoutOption *) (Option<ReactXP.Types.ViewOnLayoutEvent -> unit>) * Option<LibClient.Output.Layout>) -> ReactElement"
                    ],
                    [
                        "WithDefault",
                        "InitialOnly",
                        "bool",
                        "false"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.With.Now": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "With",
                        "DateTimeOffset -> ReactElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.With.Ref": [
            "Ok",
            {
                "Name": "Props<'T>",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "OnInitialize",
                        "('T -> unit)",
                        "None"
                    ],
                    [
                        "Regular",
                        "With",
                        "(((* bindRef *) LibClient.JsInterop.JsNullable<'T> -> unit) * Option<'T>) -> ReactElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.With.RefDom": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "OnInitialize",
                        "(Browser.Types.Element -> unit)",
                        "None"
                    ],
                    [
                        "Regular",
                        "With",
                        "(((* bindRef *) Browser.Types.Element -> unit) * Option<Browser.Types.Element>) -> ReactElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.With.ScreenSize": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "With",
                        "LibClient.Responsive.ScreenSize -> ReactElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibClient.Components.With.SortAndFilter": [
            "Ok",
            {
                "Name": "Props<'Item, 'SortField>",
                "Fields": [
                    [
                        "Regular",
                        "AllItems",
                        "seq<'Item>"
                    ],
                    [
                        "Regular",
                        "InitialSort",
                        "'SortField * SortDirection"
                    ],
                    [
                        "Regular",
                        "SortKey",
                        "'SortField -> 'Item -> string"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "InitialFilter",
                        "NonemptyString",
                        "None"
                    ],
                    [
                        "Regular",
                        "FilterCandidate",
                        "'Item -> string"
                    ],
                    [
                        "Regular",
                        "Content",
                        "(* sortedFilteredItems *) seq<'Item> * (* currSort *) ('SortField * SortDirection) * (* maybeCurrFilter *) Option<NonemptyString> * (* setSort *) ('SortField * SortDirection -> unit) * (* setFilter *) (Option<NonemptyString> -> unit) -> ReactElement"
                    ]
                ]
            }
        ],
        "LibRouter.Components.Dialogs": [
            "Ok",
            {
                "Name": "Props<'Route, 'ResultlessDialog, 'ResultfulDialog when 'Route: equality>",
                "Fields": [
                    [
                        "Regular",
                        "Nav",
                        "Navigation<'Route, 'ResultlessDialog, 'ResultfulDialog>"
                    ],
                    [
                        "Regular",
                        "Dialogs",
                        "List<NavigationDialog<'ResultlessDialog>>"
                    ],
                    [
                        "Regular",
                        "DialogsState",
                        "DialogsState<'ResultfulDialog>"
                    ],
                    [
                        "Regular",
                        "MakeResultless",
                        "('ResultlessDialog * (LibClient.Dialogs.DialogCloseMethod -> ReactEvent.Action -> unit)) -> ReactElement"
                    ],
                    [
                        "Regular",
                        "MakeResultful",
                        "('ResultfulDialog  * (LibClient.Dialogs.DialogCloseMethod -> ReactEvent.Action -> unit)) -> ReactElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibRouter.Components.Legacy.TopNav.BackButton": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibRouter.Components.Link": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "To",
                        "string"
                    ],
                    [
                        "WithDefault",
                        "children",
                        "Fable.React.ReactElement",
                        "Fable.React.Helpers.nothing"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "LibClient.JsInterop.Undefined"
                    ]
                ]
            }
        ],
        "LibRouter.Components.LogRouteTransitions": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibRouter.Components.NativeBackButton": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "LibClient.JsInterop.Undefined"
                    ]
                ]
            }
        ],
        "LibRouter.Components.Nav.Top.BackButton": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibRouter.Components.RXNavigator": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "ref",
                        "(RXNavigator) -> unit"
                    ],
                    [
                        "Regular",
                        "renderScene",
                        "(NavigatorRoute) -> ReactElement"
                    ]
                ]
            }
        ],
        "LibRouter.Components.Route": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefault",
                        "children",
                        "ReactElement",
                        "noElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Footer",
                        "ReactElement",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "LegacyTopNav",
                        "ReactElement",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "BottomSection",
                        "ReactElement",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "StaticContent",
                        "ReactElement",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "GoToTopButton",
                        "((ReactEvent.Action -> unit) -> ReactElement)",
                        "None"
                    ],
                    [
                        "WithDefault",
                        "Scroll",
                        "Scroll",
                        "Vertical"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "RestoreScroll",
                        "RestoreScroll",
                        "None"
                    ],
                    [
                        "WithDefault",
                        "ContentWidth",
                        "ContentWidth",
                        "Full"
                    ],
                    [
                        "WithDefault",
                        "OnNetworkFailure",
                        "OnNetworkFailure",
                        "OnNetworkFailure.DefaultVisuals"
                    ]
                ]
            }
        ],
        "LibRouter.Components.Router": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "LibClient.JsInterop.Undefined"
                    ]
                ]
            }
        ],
        "LibRouter.Components.With.Location": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "With",
                        "LibRouter.Components.Router.Location -> ReactElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibRouter.Components.With.Navigation": [
            "Ok",
            {
                "Name": "Props<'Route, 'ResultlessDialog, 'ResultfulDialog when 'Route: equality>",
                "Fields": [
                    [
                        "Regular",
                        "Spec",
                        "LibRouter.RoutesSpec.Conversions<'Route, 'ResultlessDialog>"
                    ],
                    [
                        "Regular",
                        "NavigationState",
                        "LibRouter.RoutesSpec.NavigationState<'Route, 'ResultlessDialog, 'ResultfulDialog>"
                    ],
                    [
                        "Regular",
                        "With",
                        "Navigation<'Route, 'ResultlessDialog, 'ResultfulDialog> -> ReactElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibRouter.Components.With.Route": [
            "Ok",
            {
                "Name": "Props<'Route, 'ResultlessDialog, 'ResultfulDialog>",
                "Fields": [
                    [
                        "Regular",
                        "Spec",
                        "LibRouter.RoutesSpec.Conversions<'Route, 'ResultlessDialog>"
                    ],
                    [
                        "Regular",
                        "With",
                        "Option<NavigationFrame<'Route, 'ResultlessDialog>> -> ReactElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibUiAdmin.Components.Grid": [
            "Ok",
            {
                "Name": "Props<'T>",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Headers",
                        "ReactElement",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "HeadersRaw",
                        "ReactElement",
                        "None"
                    ],
                    [
                        "Regular",
                        "Input",
                        "Input<'T>"
                    ],
                    [
                        "WithDefault",
                        "PageSizeChoices",
                        "List<PositiveInteger>",
                        "([10; 20; 50; 100] |> List.map PositiveInteger.ofLiteral)"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibUiAdmin.Components.Legacy.QueryGrid": [
            "Ok",
            {
                "Name": "Props<'Item, 'QueryFormField, 'QueryAcc, 'Query when 'QueryFormField: comparison and 'QueryAcc :> AbstractAcc<'QueryFormField, 'Query>>",
                "Fields": [
                    [
                        "Regular",
                        "Headers",
                        "ReactElement"
                    ],
                    [
                        "Regular",
                        "MakeRow",
                        "('Item * (* lastRequestQuery *) Option<'Query> * (* refresh *) (unit -> unit)) -> ReactElement"
                    ],
                    [
                        "Regular",
                        "InitialQueryAcc",
                        "'QueryAcc"
                    ],
                    [
                        "Regular",
                        "QueryForm",
                        "FormHandle<'QueryFormField, 'QueryAcc, 'Query> -> ReactElement"
                    ],
                    [
                        "Regular",
                        "Mode",
                        "Mode<'Item, 'Query>"
                    ],
                    [
                        "WithDefault",
                        "PageSizeChoices",
                        "List<PositiveInteger>",
                        "([10; 20; 50; 100] |> List.map PositiveInteger.ofLiteral)"
                    ],
                    [
                        "WithDefault",
                        "InitialPageSize",
                        "PositiveInteger",
                        "PositiveInteger.ofLiteral 10"
                    ],
                    [
                        "WithDefault",
                        "ShouldSubmitOnMountIfValid",
                        "bool",
                        "false"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "LibUiAdmin.Components.QueryGrid": [
            "Ok",
            {
                "Name": "Props<'Item, 'QueryFormField, 'QueryAcc, 'Query when 'QueryFormField: comparison and 'Query : equality and 'QueryAcc :> AbstractAcc<'QueryFormField, 'Query>>",
                "Fields": [
                    [
                        "Regular",
                        "Mode",
                        "Mode<'Item, 'Query>"
                    ],
                    [
                        "Regular",
                        "Page",
                        "Page<'Query>"
                    ],
                    [
                        "Regular",
                        "OnPageChange",
                        "Page<'Query> -> unit"
                    ],
                    [
                        "Regular",
                        "InitialQueryAcc",
                        "'QueryAcc"
                    ],
                    [
                        "Regular",
                        "Headers",
                        "ReactElement"
                    ],
                    [
                        "Regular",
                        "Row",
                        "'Item * (* currQueryPage *) Option<QueryPage<'Query>> * (* refresh *) (unit -> unit) -> ReactElement"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "QueryForm",
                        "FormHandle<'QueryFormField, 'QueryAcc, 'Query> -> ReactElement",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "CustomRender",
                        "((* Form *) ReactElement * (* Grid *) ReactElement -> ReactElement)",
                        "None"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "ThirdParty.Map.Components.Base": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "ApiKey",
                        "string"
                    ],
                    [
                        "WithDefault",
                        "Position",
                        "MapPosition",
                        "MapPosition.Auto"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnPositionChanged",
                        "MapPosition -> unit",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Zoom",
                        "int",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Markers",
                        "List<Marker>",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Shapes",
                        "List<Shape>",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "FullScreen",
                        "bool",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "BackgroundColor",
                        "string",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "ClickableIcons",
                        "bool",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "DisableDefaultUI",
                        "bool",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "MinZoom",
                        "float",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "MaxZoom",
                        "float",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Styles",
                        "List<MapStyle>",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Directions",
                        "List<Directions>",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "ThirdParty.Map.Components.Native.Circle": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Center",
                        "LatLng"
                    ],
                    [
                        "Regular",
                        "Radius",
                        "float"
                    ]
                ]
            }
        ],
        "ThirdParty.Map.Components.Native.LatLngFromAddress": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Address",
                        "string"
                    ],
                    [
                        "Regular",
                        "With",
                        "AsyncData<LatLng> -> ReactElement"
                    ],
                    [
                        "Regular",
                        "ApiKey",
                        "string"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "ThirdParty.Map.Components.Native.Map": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "ApiKey",
                        "string"
                    ],
                    [
                        "Regular",
                        "Value",
                        "Option<LatLng>"
                    ],
                    [
                        "Regular",
                        "OnChange",
                        "Option<LatLng> -> unit"
                    ],
                    [
                        "Regular",
                        "FullScreen",
                        "bool"
                    ],
                    [
                        "Regular",
                        "Markers",
                        "Option<List<Marker>>"
                    ],
                    [
                        "Regular",
                        "Shapes",
                        "Option<List<Shape>>"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "ThirdParty.Map.Components.Native.Marker": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Coordinate",
                        "LatLng"
                    ],
                    [
                        "Regular",
                        "Draggable",
                        "bool"
                    ],
                    [
                        "Regular",
                        "Image",
                        "ImageSource"
                    ]
                ]
            }
        ],
        "ThirdParty.Map.Components.Native.Polyline": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Value",
                        "Polyline"
                    ]
                ]
            }
        ],
        "ThirdParty.Map.Components.Native.ReactNativeMaps": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Value",
                        "LatLng"
                    ],
                    [
                        "Regular",
                        "OnChange",
                        "Option<LatLng> -> unit"
                    ]
                ]
            }
        ],
        "ThirdParty.Map.Components.Web.LatLngFromAddress": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Address",
                        "string"
                    ],
                    [
                        "Regular",
                        "With",
                        "AsyncData<LatLng> -> ReactElement"
                    ],
                    [
                        "Regular",
                        "ApiKey",
                        "string"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "ThirdParty.Map.Components.Web.Map": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "ApiKey",
                        "string"
                    ],
                    [
                        "Regular",
                        "Position",
                        "MapPosition"
                    ],
                    [
                        "Regular",
                        "OnPositionChanged",
                        "Option<MapPosition -> unit>"
                    ],
                    [
                        "Regular",
                        "Zoom",
                        "Option<int>"
                    ],
                    [
                        "Regular",
                        "Markers",
                        "Option<List<Marker>>"
                    ],
                    [
                        "Regular",
                        "Shapes",
                        "Option<List<Shape>>"
                    ],
                    [
                        "Regular",
                        "Directions",
                        "Option<List<Directions>>"
                    ],
                    [
                        "Regular",
                        "BackgroundColor",
                        "Option<string>"
                    ],
                    [
                        "Regular",
                        "ClickableIcons",
                        "Option<bool>"
                    ],
                    [
                        "Regular",
                        "DisableDefaultUI",
                        "Option<bool>"
                    ],
                    [
                        "Regular",
                        "MinZoom",
                        "Option<float>"
                    ],
                    [
                        "Regular",
                        "MaxZoom",
                        "Option<float>"
                    ],
                    [
                        "Regular",
                        "FullScreen",
                        "Option<bool>"
                    ],
                    [
                        "Regular",
                        "Styles",
                        "Option<List<MapStyle>>"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "ThirdParty.Map.Components.With.LatLng": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Address",
                        "string"
                    ],
                    [
                        "Regular",
                        "With",
                        "AsyncData<LatLngType> -> ReactElement"
                    ],
                    [
                        "Regular",
                        "ApiKey",
                        "string"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "key",
                        "string",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "ThirdParty.Recharts.Components.Area": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Type",
                        "Type",
                        "Some Type.Linear"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "DataKey",
                        "string",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "LegendType",
                        "LegendType",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Name",
                        "string",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Stroke",
                        "Color",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "StrokeWidth",
                        "int",
                        "Some 1"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Fill",
                        "Color",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "StackId",
                        "StackId",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "IsAnimationActive",
                        "bool",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "AnimationEasing",
                        "AnimationEasing",
                        "Some AnimationEasing.Ease"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnAnimationStart",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnAnimationEnd",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnClick",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseDown",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseUp",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseMove",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseOver",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseOut",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseEnter",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseLeave",
                        "(unit -> unit)",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "ThirdParty.Recharts.Components.AreaChart": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Layout",
                        "Layout",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Width",
                        "int",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Height",
                        "int",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Data",
                        "obj array",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Margin",
                        "EdgeInsets",
                        "Some { Top = 5; Bottom = 5; Left = 5; Right = 5; }"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "StackOffset",
                        "StackOffset",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnClick",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseEnter",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseMove",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseLeave",
                        "(unit -> unit)",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "ThirdParty.Recharts.Components.CartesianGrid": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "X",
                        "int",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Y",
                        "int",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Width",
                        "int",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Height",
                        "int",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Horizontal",
                        "bool",
                        "Some true"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Vertical",
                        "bool",
                        "Some true"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "HorizontalPoints",
                        "float array",
                        "Some [||]"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "VerticalPoints",
                        "float array",
                        "Some [||]"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "StrokeDashArray",
                        "float array",
                        "Some [||]"
                    ]
                ]
            }
        ],
        "ThirdParty.Recharts.Components.Cell": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Fill",
                        "Color",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Stroke",
                        "Color",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "StrokeWidth",
                        "int",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "ThirdParty.Recharts.Components.Legend": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Width",
                        "int",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Height",
                        "int",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Layout",
                        "Layout",
                        "Some Layout.Horizontal"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "HorizontalAlignment",
                        "HorizontalAlignment",
                        "Some HorizontalAlignment.Center"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "VerticalAlignment",
                        "VerticalAlignment",
                        "Some VerticalAlignment.Bottom"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "IconSize",
                        "int",
                        "Some 14"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Type",
                        "LegendType",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Margin",
                        "EdgeInsets",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnClick",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseDown",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseUp",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseMove",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseOver",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseOut",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseEnter",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseLeave",
                        "(unit -> unit)",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "ThirdParty.Recharts.Components.Line": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Type",
                        "Type",
                        "Some Type.Linear"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "DataKey",
                        "string",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "LegendType",
                        "LegendType",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Name",
                        "string",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Stroke",
                        "Color",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "StrokeWidth",
                        "int",
                        "Some 1"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "IsAnimationActive",
                        "bool",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "AnimationEasing",
                        "AnimationEasing",
                        "Some AnimationEasing.Ease"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnAnimationStart",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnAnimationEnd",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnClick",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseDown",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseUp",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseMove",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseOver",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseOut",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseEnter",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseLeave",
                        "(unit -> unit)",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "ThirdParty.Recharts.Components.LineChart": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Layout",
                        "Layout",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Width",
                        "int",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Height",
                        "int",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Data",
                        "obj array",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Margin",
                        "EdgeInsets",
                        "Some { Top = 5; Bottom = 5; Left = 5; Right = 5; }"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnClick",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseEnter",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseMove",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseLeave",
                        "(unit -> unit)",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "ThirdParty.Recharts.Components.Pie": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Cx",
                        "Offset",
                        "Some (Offset.Percentage 50.)"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Cy",
                        "Offset",
                        "Some (Offset.Percentage 50.)"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "InnerRadius",
                        "Radius",
                        "Some (Radius.Number 0)"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OuterRadius",
                        "Radius",
                        "Some (Radius.Percentage 80.)"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "StartAngle",
                        "float",
                        "Some 0."
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "EndAngle",
                        "float",
                        "Some 360."
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "MinAngle",
                        "float",
                        "Some 0."
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "PaddingAngle",
                        "float",
                        "Some 0."
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "NameKey",
                        "string",
                        "Some \"Name\""
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "DataKey",
                        "string",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Fill",
                        "Color",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "LegendType",
                        "LegendType",
                        "Some LegendType.Rectangle"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Data",
                        "obj array",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "IsAnimationActive",
                        "bool",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "AnimationEasing",
                        "AnimationEasing",
                        "Some AnimationEasing.Ease"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnAnimationStart",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnAnimationEnd",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnClick",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseDown",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseUp",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseMove",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseOver",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseOut",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseEnter",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseLeave",
                        "(unit -> unit)",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "ThirdParty.Recharts.Components.PieChart": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Width",
                        "int",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Height",
                        "int",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Margin",
                        "EdgeInsets",
                        "Some { Top = 5; Bottom = 5; Left = 5; Right = 5; }"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnClick",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseEnter",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseLeave",
                        "(unit -> unit)",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "ThirdParty.Recharts.Components.ResponsiveContainer": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Aspect",
                        "float",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Width",
                        "Size",
                        "Some (Size.Percentage 100.)"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Height",
                        "Size",
                        "Some (Size.Percentage 100.)"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "MinWidth",
                        "int",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "MinHeight",
                        "int",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Debounce",
                        "int",
                        "Some 0"
                    ]
                ]
            }
        ],
        "ThirdParty.Recharts.Components.Tooltip": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Separator",
                        "string",
                        "Some \":\""
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Offset",
                        "int",
                        "Some 10"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "FilterNull",
                        "bool",
                        "Some true"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "ViewBox",
                        "ViewBox",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Active",
                        "bool",
                        "Some false"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Position",
                        "Position",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Coordinate",
                        "Position",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Content",
                        "(ContentInput -> ReactElement)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "IsAnimationActive",
                        "bool",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "AnimationEasing",
                        "AnimationEasing",
                        "Some AnimationEasing.Ease"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "AnimationBeginMs",
                        "int",
                        "Some 0"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "AnimationDurationMs",
                        "int",
                        "Some 1500"
                    ]
                ]
            }
        ],
        "ThirdParty.Recharts.Components.XAxis": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Hide",
                        "bool",
                        "Some false"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "DataKey",
                        "string",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "XAxisId",
                        "AxisId",
                        "Some (AxisId.Number 0)"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Width",
                        "int",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Height",
                        "int",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Orientation",
                        "XAxisOrientation",
                        "Some XAxisOrientation.Bottom"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Type",
                        "AxisType",
                        "Some AxisType.Category"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "AllowDecimals",
                        "bool",
                        "Some true"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "AllowDataOverflow",
                        "bool",
                        "Some false"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "AllowDuplicatedCategory",
                        "bool",
                        "Some true"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Angle",
                        "float",
                        "Some 0."
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "TickCount",
                        "int",
                        "Some 5"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Interval",
                        "AxisInterval",
                        "Some AxisInterval.PreserveEnd"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Padding",
                        "EdgeInsets",
                        "Some { Top = 0; Bottom = 0; Left = 0; Right = 0; }"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "MinTickGap",
                        "int",
                        "Some 5"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "TickSize",
                        "int",
                        "Some 6"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Ticks",
                        "obj array",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Mirror",
                        "bool",
                        "Some false"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Reversed",
                        "bool",
                        "Some false"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Scale",
                        "AxisScale",
                        "Some AxisScale.Auto"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Unit",
                        "AxisUnit",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Name",
                        "AxisName",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnClick",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseDown",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseUp",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseMove",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseOver",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseOut",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseEnter",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseLeave",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "TickFormatter",
                        "(obj -> string)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "TickMargin",
                        "int",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Domain",
                        "AxisDomain",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "ThirdParty.Recharts.Components.YAxis": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "WithDefaultAutoWrapSome",
                        "Hide",
                        "bool",
                        "Some false"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "DataKey",
                        "string",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "YAxisId",
                        "AxisId",
                        "Some (AxisId.Number 0)"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Width",
                        "int",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Height",
                        "int",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Orientation",
                        "YAxisOrientation",
                        "Some YAxisOrientation.Left"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Type",
                        "AxisType",
                        "Some AxisType.Number"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "AllowDecimals",
                        "bool",
                        "Some true"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "AllowDataOverflow",
                        "bool",
                        "Some false"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "AllowDuplicatedCategory",
                        "bool",
                        "Some true"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "TickCount",
                        "int",
                        "Some 5"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Interval",
                        "AxisInterval",
                        "Some AxisInterval.PreserveEnd"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Padding",
                        "EdgeInsets",
                        "Some { Top = 0; Bottom = 0; Left = 0; Right = 0; }"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "MinTickGap",
                        "int",
                        "Some 5"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "TickSize",
                        "int",
                        "Some 6"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Ticks",
                        "obj array",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Mirror",
                        "bool",
                        "Some false"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Reversed",
                        "bool",
                        "Some false"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Scale",
                        "AxisScale",
                        "Some AxisScale.Auto"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Unit",
                        "AxisUnit",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Name",
                        "AxisName",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnClick",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseDown",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseUp",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseMove",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseOver",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseOut",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseEnter",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "OnMouseLeave",
                        "(unit -> unit)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "TickFormatter",
                        "(obj -> string)",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "TickMargin",
                        "int",
                        "JsUndefined"
                    ],
                    [
                        "WithDefaultAutoWrapSome",
                        "Domain",
                        "AxisDomain",
                        "JsUndefined"
                    ]
                ]
            }
        ],
        "ThirdParty.SyntaxHighlighter.Components.SyntaxHighlighter": [
            "Ok",
            {
                "Name": "Props",
                "Fields": [
                    [
                        "Regular",
                        "Language",
                        "Language"
                    ],
                    [
                        "Regular",
                        "Source",
                        "string"
                    ]
                ]
            }
        ]
    },
    "Errors": []
}
      """

  let propsDataResult: Result<ScrapeResult, string> = Json.FromString encodedData

module Icons =
  let iconsList: List<string * IconConstructor> = [
    ("ArrowBack", Icon.ArrowBack)
    ("ArrowDown", Icon.ArrowDown)
    ("ArrowIntoBox", Icon.ArrowIntoBox)
    ("ArrowLeft", Icon.ArrowLeft)
    ("ArrowRight", Icon.ArrowRight)
    ("ArrowUp", Icon.ArrowUp)
    ("Attachment", Icon.Attachment)
    ("AttachmentCircle", Icon.AttachmentCircle)
    ("Back", Icon.Back)
    ("Bell", Icon.Bell)
    ("BellOutline", Icon.BellOutline)
    ("Calendar", Icon.Calendar)
    ("CheckMark", Icon.CheckMark)
    ("CheckboxChecked", Icon.CheckboxChecked)
    ("CheckboxEmpty", Icon.CheckboxEmpty)
    ("CheckboxUnknown", Icon.CheckboxUnknown)
    ("ChevronDown", Icon.ChevronDown)
    ("ChevronLeft", Icon.ChevronLeft)
    ("ChevronRight", Icon.ChevronRight)
    ("ChevronUp", Icon.ChevronUp)
    ("Circle", Icon.Circle)
    ("Cog", Icon.Cog)
    ("Dish", Icon.Dish)
    ("DotDotDotHorizontal", Icon.DotDotDotHorizontal)
    ("DotDotDotVertical", Icon.DotDotDotVertical)
    ("EditFile", Icon.EditFile)
    ("Eye", Icon.Eye)
    ("Facebook", Icon.Facebook)
    ("Filters", Icon.Filters)
    ("First", Icon.First)
    ("FloppyDisk", Icon.FloppyDisk)
    ("Funnel", Icon.Funnel)
    ("GarbageBin", Icon.GarbageBin)
    ("HalfStar", Icon.HalfStar)
    ("HeartOutline", Icon.HeartOutline)
    ("Home", Icon.Home)
    ("HomeOutline", Icon.HomeOutline)
    ("Instagram", Icon.Instagram)
    ("Last", Icon.Last)
    ("LinesOfTextLeftAlligned", Icon.LinesOfTextLeftAlligned)
    ("Location", Icon.Location)
    ("MagnifyingGlass", Icon.MagnifyingGlass)
    ("Megaphone", Icon.Megaphone)
    ("Menu", Icon.Menu)
    ("Minus", Icon.Minus)
    ("Next", Icon.Next)
    ("Offer", Icon.Offer)
    ("Pencil", Icon.Pencil)
    ("Person", Icon.Person)
    ("PersonOutline", Icon.PersonOutline)
    ("Plus", Icon.Plus)
    ("Power", Icon.Power)
    ("Previous", Icon.Previous)
    ("RadioButtonEmpty", Icon.RadioButtonEmpty)
    ("RadioButtonFilled", Icon.RadioButtonFilled)
    ("RedoArrow", Icon.RedoArrow)
    ("Reload", Icon.Reload)
    ("Report", Icon.Report)
    ("Resend", Icon.Resend)
    ("Retry", Icon.Retry)
    ("SandClock", Icon.SandClock)
    ("Save", Icon.Save)
    ("Send", Icon.Send)
    ("Sharp", Icon.Sharp)
    ("ShoppingCart", Icon.ShoppingCart)
    ("SpeechBubble", Icon.SpeechBubble)
    ("SpeechBubbleCircle", Icon.SpeechBubbleCircle)
    ("SpeechBubbleOutline", Icon.SpeechBubbleOutline)
    ("SpeechBubbleWithBell", Icon.SpeechBubbleWithBell)
    ("Star", Icon.Star)
    ("StarOutline", Icon.StarOutline)
    ("Submit", Icon.Submit)
    ("Tag", Icon.Tag)
    ("Tags", Icon.Tags)
    ("Ticket", Icon.Ticket)
    ("TwoSheets", Icon.TwoSheets)
    ("X", Icon.X)
    ("YouTube", Icon.YouTube)
  ]

module Colors =
  let colorVariantsData: List<string * Variants> = [
    ("grey", MaterialDesignColors.``grey``)
    ("Red", MaterialDesignColors.``Red``)
    ("Pink", MaterialDesignColors.``Pink``)
    ("Purple", MaterialDesignColors.``Purple``)
    ("Deep Purple", MaterialDesignColors.``Deep Purple``)
    ("Indigo", MaterialDesignColors.``Indigo``)
    ("Blue", MaterialDesignColors.``Blue``)
    ("Light Blue", MaterialDesignColors.``Light Blue``)
    ("Cyan", MaterialDesignColors.``Cyan``)
    ("Teal", MaterialDesignColors.``Teal``)
    ("Green", MaterialDesignColors.``Green``)
    ("Light Green", MaterialDesignColors.``Light Green``)
    ("Lime", MaterialDesignColors.``Lime``)
    ("Yellow", MaterialDesignColors.``Yellow``)
    ("Amber", MaterialDesignColors.``Amber``)
    ("Orange", MaterialDesignColors.``Orange``)
    ("Deep Orange", MaterialDesignColors.``Deep Orange``)
    ("Brown", MaterialDesignColors.``Brown``)
  ]

module RenderDslSnippets =
  let private encodedData:  string =
      """
[
    "Ok",
    [
        {
            "Key": "rt-match",
            "Prefix": "rtm",
            "Description": "The RenderDsl `<rt-match>` is the eqiuvalent of the F# `match`, the workhorse of consuming F# types.",
            "Body": [
                "<rt-match what='$1'>",
                "    <rt-case is='$2'>",
                "        ${0:QQQ}",
                "    </rt-case>",
                "</rt-match>"
            ],
            "Scope": "renderdsl"
        },
        {
            "Key": "rt-case",
            "Prefix": "rtc",
            "Description": "An `<rt-case>` block.",
            "Body": [
                "<rt-case is='$1'>",
                "    ${0:QQQ}",
                "</rt-case>"
            ],
            "Scope": "renderdsl"
        },
        {
            "Key": "form-acc",
            "Prefix": "formacc",
            "Description": "Forms in EggShell are backed by a `Field` union type, and an `Accumulator` which holds the data that the user has input so far, and provides a validation function that either reports errors into the form's UI components, or produces a valid value. This snippet scaffolds this structure.",
            "Body": [
                "// TODO move to the file top opens block",
                "open LibClient.Components.Form.Base.Types",
                "",
                "[<RequireQualifiedAccess>]",
                "type Field = Name | Age",
                "",
                "// this you probably already have defined",
                "type AccResult = {",
                "    Name: NonemptyString",
                "    Age:  PositiveInteger",
                "}",
                "",
                "type Acc = {",
                "    Name: Option<NonemptyString>",
                "    Age:  LibClient.Components.Input.PositiveInteger.Value",
                "} with",
                "    static member Initial : Acc =",
                "        {",
                "            Name = None",
                "            Age  = LibClient.Components.Input.PositiveInteger.empty",
                "        }",
                "",
                "    interface AbstractAcc<Field, AccResult> with",
                "        member this.Validate () : Result<AccResult, ValidationErrors<Field>> = validateForm {",
                "            let! name = Forms.GetFieldValue2 this.Name Field.Name",
                "            and! age  = Forms.GetFieldValue2 this.Age.Result Field.Age",
                "",
                "            return {",
                "                Name = name",
                "                Age  = age",
                "            }",
                "        }"
            ],
            "Scope": "fsharp"
        },
        {
            "Key": "form",
            "Prefix": "form",
            "Description": "A form with a sample field and a submit button. Meant to be used together with the `Field` and `Acc` defined by the `form-acc` F# scoped snippet.",
            "Body": [
                "<LC.Form.Base",
                " Accumulator='~ManageInternallyInitializingWith Acc.Initial'",
                " Submit='actions.Submit'",
                " rt-prop-children='Content(form)'>",
                "    <LC.Input.Text",
                "     Label='\"Name\"'",
                "     Validity='form.FieldValidity Field.Name'",
                "     Value='form.Acc.Name'",
                "     OnChange='fun value -> form.UpdateAcc (fun acc -> { acc with Name = value })'/>",
                "",
                "    <LC.Buttons>",
                "        <LC.Button",
                "         Label='\"Submit\"'",
                "         State='^LowLevel (if form.IsSubmitInProgress then ~InProgress else ~Actionable form.TrySubmitLowLevel)'/>",
                "    </LC.Buttons>",
                "</LC.Form.Base>"
            ],
            "Scope": "renderdsl"
        },
        {
            "Key": "input-picker",
            "Prefix": "inpick",
            "Description": "LC.Input.Picker bound to the current form, with update functions etc.",
            "Body": [
                "<LC.Input.Picker class='input'",
                " Label='\"${1:QQQ}\"'",
                " Items='~Static ([] |> OrderedSet.ofList, fun item -> item.ToString())'",
                " ItemView='~Default (fun item -> {| Label = item.ToString() |})'",
                " Value='~SelectableValue.ExactlyOne (form.Acc.${2:QQQ}, fun value -> form.UpdateAcc (fun acc -> { acc with ${2:QQQ} = Some value }))'",
                " Validity='form.FieldValidity Field.${3:QQQ}'/>"
            ],
            "Scope": "renderdsl"
        },
        {
            "Key": "input-text",
            "Prefix": "intext",
            "Description": "LC.Input.Text bound to the current form, with update functions etc.",
            "Body": [
                "<LC.Input.Text",
                " Label='\"${1:QQQ}\"'",
                " Value='form.Acc.${2:QQQ}'",
                " Validity='form.FieldValidity Field.${3:QQQ}'",
                " OnChange='fun value -> form.UpdateAcc (fun acc -> { acc with ${4:QQQ} = value })'/>"
            ],
            "Scope": "renderdsl"
        },
        {
            "Key": "input-positive-integer",
            "Prefix": "inpint",
            "Description": "LC.Input.PositiveInteger bound to the current form, with update functions etc.",
            "Body": [
                "<LC.Input.PositiveInteger",
                " Label='\"${1:QQQ}\"'",
                " Validity='form.FieldValidity Field.${2:QQQ}'",
                " Value='form.Acc.${3:QQQ}'",
                " OnChange='fun value -> form.UpdateAcc (fun acc -> { acc with ${4:QQQ} = value })'/>"
            ],
            "Scope": "renderdsl"
        },
        {
            "Key": "input-unsigned-decimal",
            "Prefix": "inudec",
            "Description": "LC.Input.UnsignedDecimal bound to the current form, with update functions etc.",
            "Body": [
                "<LC.Input.UnsignedDecimal",
                " Label='\"${1:QQQ}\"'",
                " Validity='form.FieldValidity Field.${2:QQQ}'",
                " Value='form.Acc.${3:QQQ}'",
                " OnChange='fun value -> form.UpdateAcc (fun acc -> { acc with ${4:QQQ} = value })'/>"
            ],
            "Scope": "renderdsl"
        },
        {
            "Key": "with-navigation",
            "Prefix": "withnav",
            "Description": "Add an opening With.Navigation tag",
            "Body": [
                "<With.Navigation rt-with='nav'>"
            ],
            "Scope": "renderdsl"
        },
        {
            "Key": "with-global-executor",
            "Prefix": "withgex",
            "Description": "Add an opening With.GlobalExecutor tag",
            "Body": [
                "<LC.With.GlobalExecutor rt-with='makeExecutor'>"
            ],
            "Scope": "renderdsl"
        },
        {
            "Key": "style-responsive",
            "Prefix": "sr",
            "Description": "Add responsive classes to the end of the current selector",
            "Body": [
                "] && [",
                "    ScreenSize.Desktop.Class => [",
                "    ]",
                "    ScreenSize.Handheld.Class => [",
                "    ]"
            ],
            "Scope": "fsharp"
        },
        {
            "Key": "screen-size-class",
            "Prefix": "ssc",
            "Description": "screenSize.Class",
            "Body": [
                "screenSize.Class"
            ],
            "Scope": "renderdsl"
        },
        {
            "Key": "react-ref",
            "Prefix": "reactref",
            "Description": "Bindings to use in your component to allow working with React refs (see [docs](./how-to/refs.md) for full details)",
            "Body": [
                "// TODO change LibClient.Components.InputPositiveInteger.InputPositiveIntegerRef to whatever ref type you need",
                "// TODO change Whatever to the actual component name",
                "// NOTE use multiline editing for these changes",
                "let mutable maybeRefWhatever: Option<LibClient.Components.InputPositiveInteger.InputPositiveIntegerRef> = None",
                "member _.MaybeRefWhatever",
                "    with get () = maybeRefWhatever",
                "    and  set (value: Option<LibClient.Components.InputPositiveInteger.InputPositiveIntegerRef>) : unit =",
                "         match (maybeRefWhatever, value) with",
                "         | (None, Some input) ->",
                "             // TODO this is where you get the ref for the first time,",
                "             // and can do things like input.SelectAll() or input.RequestFocus()",
                "             // or just delete this match block alltogether if you don't need it",
                "         | _ -> Noop",
                "",
                "         maybeRefWhatever <- value",
                "// TODO put this as the first thing in the body of Actions",
                "let bound = {|",
                "    RefWhatever = fun (nullableInstance: LibClient.JsInterop.JsNullable<LibClient.Components.InputPositiveInteger.InputPositiveIntegerRef>) ->",
                "        this.MaybeRefWhatever <- nullableInstance.ToOption",
                "|}",
                "member _.Bound = bound",
                "// TODO at the call site in the .render file you can now say ref='actions.Bound.RefWhatever'"
            ],
            "Scope": "fsharp"
        },
        {
            "Key": "theme",
            "Prefix": "theme",
            "Description": "Component styles theme",
            "Body": [
                "let private baseStyles = asBlocks [",
                "   \"view\" => []",
                "]",
                "",
                "type (* class to enable named parameters *) Theme() =",
                "    static let customize = makeCustomize(\"${0:COMPONENT'S_FULLY_QUALIFIED_NAME}\", baseStyles)",
                "",
                "    static member All (${1:exampleParameter}: int) : unit =",
                "        customize [",
                "            Theme.Rules(${1:exampleParameter})",
                "        ]",
                "",
                "    static member One (${1:exampleParameter}: int) : Styles =",
                "        Theme.Rules(${1:exampleParameter}) |> makeSheet",
                "",
                "    static member Rules (${1:exampleParameter}: int) : List<ISheetBuildingBlock> = [",
                "        \"view\" => [",
                "            fontSize ${1:exampleParameter}",
                "         ]",
                "    ]",
                "",
                "let styles = compile (List.concat [",
                "    baseStyles",
                "    Theme.Rules (",
                "        ${1:exampleParameter} = 1",
                "    )",
                "])"
            ],
            "Scope": "fsharp"
        }
    ]
]
      """

  let renderDslSnippetDataResult : Result<Result<List<Snippet>, SnippetError>, string> = Json.FromString encodedData
