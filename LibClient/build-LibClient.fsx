#if !FAKE_BUILD_FSPROJ
#load "../Fake/Includes.fsx"
#load "../Meta/AppRenderDslCompiler/build-AppRenderDslCompiler.fsx"
#load "../Meta/AppEggshellCli/build-AppEggshellCli.fsx"
#endif

namespace Egg.Shell.LibClient

module Build =
    open Fake.IO
    open Egg.Shell.Fake

    type Target =
    | InitializeDependencies
    | Clean
    | EggShellBuildLib

    let targetFactory =
        BuildFile.forPath __SOURCE_DIRECTORY__ __SOURCE_FILE__
        |> BuildFile.withTargetsFromUnionType
        |> BuildFile.withDefinition (fun buildContext normalizeDir ->
            function
            | InitializeDependencies ->
                // let shouldForceInstallReactXp = NodeNpm.willInstall buildContext
                NodeNpm.install buildContext

                // // this is necessary because we're temporarily linking a forked github version
                // // of reactxp, which, unlike the published npm package, does not have the
                // // dist directory in it and needs to be built manually
                // let reactXpBuildContext = BuildFile.changeDir buildContext "./node_modules/reactxp"
                // if shouldForceInstallReactXp then
                //     // If npm install runs for the root directory, it clears out
                //     // contents from the reactxp/node_modules directory, but doesn't
                //     // clear out the hash files
                //     NodeNpm.forceInstall reactXpBuildContext
                // else
                //     NodeNpm.install reactXpBuildContext
                // NodeNpm.run "build" reactXpBuildContext

            | Clean ->
                Shell.rm_rf (normalizeDir "./node_modules")
                Shell.rm_rf (normalizeDir "./src/_autogenerated_")
                Shell.rm_rf (normalizeDir "./src/obj")
                Shell.rm_rf (normalizeDir "./src/bin")

            | EggShellBuildLib ->
                EggShellCli.buildLib buildContext
            )
        |> BuildFile.withDefaultTarget InitializeDependencies
        |> BuildFile.withExternalDependency Egg.Shell.Meta.AppRenderDslCompiler.Build.targetFactory
            (Egg.Shell.Meta.AppRenderDslCompiler.Build.Target.Link >=> InitializeDependencies)
        |> BuildFile.withExternalDependency Egg.Shell.Meta.AppEggshellCli.Build.targetFactory
            (Egg.Shell.Meta.AppEggshellCli.Build.Build >=> EggShellBuildLib)
        |> BuildFile.withInternalDependency (InitializeDependencies >=> EggShellBuildLib)
        |> BuildFile.initialize