<LC.With.ScreenSize rt-fs='true' rt-with='screenSize' rt-open='LibLifeCycleTypes.File'>
    <div class='view {TopLevelBlockClass} {screenSize.Class}'>
        <LC.With.RefDom rt-fs='true' OnInitialize='actions.OnDropZoneInitialize' rt-with='bindDivRef, _'>
            <dom.div Ref='bindDivRef' Style='[Fable.React.Props.CSSProp.Width "100%"; Fable.React.Props.CSSProp.Height "100%"]'>
                <LC.With.RefDom rt-fs='true' OnInitialize='actions.OnInputInitialize' rt-with='bindRef, input'>
                    <dom.input Type='"file"' Ref='bindRef' Hidden='true' Multiple='true' Accept='props.AcceptedTypes |> Set.map (fun item -> item.Value) |> String.concat ", "'/>
                    <LC.Buttons Align='Align.Center'>
                        <LC.Button Label='"Select File"' State='^LowLevel (~Actionable (actions.OnSelectPress input))' Styles='[| NamedFileStyles.Styles.selectFile |]'/>
                    </LC.Buttons>
                </LC.With.RefDom>
                <div class='drag-and-drop-message'>
                    <text class='text-center'>
                        <rt-match what='props.MaxFileCount'>
                            <rt-case is='Some maxFileCount when maxFileCount.Value = 1'>Paste or drag and drop file here</rt-case>
                            <rt-case is='_'>Paste or drag and drop files here</rt-case>
                        </rt-match>
                    </text>
                </div>
                <div class='constrain-message'>
                    <text class='text-center'>
                        <rt-match what='constrainMessage props.MaxFileCount props.MaxFileSize props.MaxTotalFileSize'>
                            <rt-case is='Some message'>{message.Value}</rt-case>
                            <rt-case is='None'>{=noElement}</rt-case>
                        </rt-match>
                    </text>
                </div>
                <div class='message-container'>
                    <div>
                        <text class='text-center info-message' rt-if='props.Value.Length = 1'>{props.Value.Length} file selected</text>
                        <text class='text-center info-message' rt-if='props.Value.Length > 1'>{props.Value.Length} files selected</text>
                    </div>
                    <div rt-mapo='reason := if estate.InternalValidity.InvalidReason.IsSome then estate.InternalValidity.InvalidReason else props.Validity.InvalidReason'>
                        <text class='invalid-reason'>{reason}</text>
                    </div>
                    <div rt-if='props.Validity = InputValidity.Missing'>
                        <text class='invalid-reason'>This field is required</text>
                    </div>
                </div>
            </dom.div>
        </LC.With.RefDom>
    </div>
</LC.With.ScreenSize>