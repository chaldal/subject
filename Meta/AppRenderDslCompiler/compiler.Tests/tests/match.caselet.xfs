module Components.TestRender

module FRH = Fable.React.Helpers
module FRP = Fable.React.Props
module FRS = Fable.React.Standard

open LibClient.RenderResultModule

open Components



open Components.Test



let render(props: Components.Test.Props, estate: Components.Test.Estate, pstate: Components.Test.Pstate, actions: Components.Test.Actions, __componentStyles: ReactXP.Styles.RuntimeStyles) : Fable.React.ReactElement =
    let __class = (ReactXP.Helpers.extractProp "ClassName" props) |> Option.defaultValue ""
    let __mergedStyles = ReactXP.Styles.Runtime.mergeComponentAndPropsStyles __componentStyles props
    let __parentFQN = None
    (
        match (maybeNumber) with
        | None ->
            (
                let __list = [
                    ((makeTextNode "no number") |> RenderResult.Make)
                ]
                __list |> RenderResult.ToRawElements __parentFQN
            )
            |> RenderResult.Make
        | Some 13 ->
            (
                let __list = [
                    ((makeTextNode "thirteen") |> RenderResult.Make)
                ]
                __list |> RenderResult.ToRawElements __parentFQN
            )
            |> RenderResult.Make
        | Some 42 ->
            (
                let double = 84
                (
                    let __list = [
                        (fun (__sibI, __sibC, __pFQN) ->
                            let __parentFQN = Some "Components.foo"
                            Components.foo.Make
                                (
                                    let __currExplicitProps = (Components.TypeExtensions.TEs.MakefooProps())
                                    let __currClass = (nthChildClasses __sibI __sibC)
                                    let __currStyles = (ReactXP.Styles.Runtime.findApplicableStyles __mergedStyles __currClass)
                                    let __implicitProps = [
                                        if __currClass <> "" then ("ClassName", __currClass :> obj)
                                        if (not __currStyles.IsEmpty) then ("__style", __currStyles :> obj)
                                    ]
                                    (ReactXP.Styles.Runtime.injectImplicitProps __implicitProps __currExplicitProps)
                                )
                                (
                                    let __list = [
                                        ((makeTextNode "number was 42") |> RenderResult.Make)
                                    ]
                                    __list |> RenderResult.ToRawElements __parentFQN
                                )
                        ) |> RenderResult.Make
                        (fun (__sibI, __sibC, __pFQN) ->
                            let __parentFQN = Some "Components.foo"
                            Components.foo.Make
                                (
                                    let __currExplicitProps = (Components.TypeExtensions.TEs.MakefooProps())
                                    let __currClass = (nthChildClasses __sibI __sibC)
                                    let __currStyles = (ReactXP.Styles.Runtime.findApplicableStyles __mergedStyles __currClass)
                                    let __implicitProps = [
                                        if __currClass <> "" then ("ClassName", __currClass :> obj)
                                        if (not __currStyles.IsEmpty) then ("__style", __currStyles :> obj)
                                    ]
                                    (ReactXP.Styles.Runtime.injectImplicitProps __implicitProps __currExplicitProps)
                                )
                                (
                                    let __list = [
                                        ((makeTextNode (System.String.Format("{0}{1}{2}", "double that is ", (double), ""))) |> RenderResult.Make)
                                    ]
                                    __list |> RenderResult.ToRawElements __parentFQN
                                )
                        ) |> RenderResult.Make
                    ]
                    __list |> RenderResult.ToRawElements __parentFQN
                )
                |> RenderResult.Make
            )
        | Some number ->
            (
                let double = number * 2
                (
                    let __list = [
                        ((makeTextNode (System.String.Format("{0}{1}{2}", "The number that's half of ", (double), ""))) |> RenderResult.Make)
                    ]
                    __list |> RenderResult.ToRawElements __parentFQN
                )
                |> RenderResult.Make
            )
    )
    |> RenderResult.ToRawElementsSingle __parentFQN |> RenderResult.ToSingleElement