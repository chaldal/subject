module Components.TestRender

module FRH = Fable.React.Helpers
module FRP = Fable.React.Props
module FRS = Fable.React.Standard

open LibClient.RenderResultModule

open Components



open Components.Test



let render(props: Components.Test.Props, estate: Components.Test.Estate, pstate: Components.Test.Pstate, actions: Components.Test.Actions, __componentStyles: ReactXP.Styles.RuntimeStyles) : Fable.React.ReactElement =
    let __class = (ReactXP.Helpers.extractProp "ClassName" props) |> Option.defaultValue ""
    let __mergedStyles = ReactXP.Styles.Runtime.mergeComponentAndPropsStyles __componentStyles props
    let __parentFQN = None
    (fun (__sibI, __sibC, __pFQN) ->
        let __parentFQN = Some "Components.div"
        Components.div.Make
            (
                let __currExplicitProps = (Components.TypeExtensions.TEs.MakedivProps())
                let __currClass = (nthChildClasses __sibI __sibC)
                let __currStyles = (ReactXP.Styles.Runtime.findApplicableStyles __mergedStyles __currClass)
                let __implicitProps = [
                    if __currClass <> "" then ("ClassName", __currClass :> obj)
                    if (not __currStyles.IsEmpty) then ("__style", __currStyles :> obj)
                ]
                (ReactXP.Styles.Runtime.injectImplicitProps __implicitProps __currExplicitProps)
            )
            (
                let __list = [
                    (fun (__sibI, __sibC, __pFQN) ->
                        let __parentFQN = Some "Components.Something"
                        Components.Something.Make
                            (
                                let __currExplicitProps =
                                    (Components.TypeExtensions.TEs.MakeSomethingProps(
                                        pValue = (Components.Something.PropValueFactory.Make 15)
                                    ))
                                let __currClass = (nthChildClasses __sibI __sibC)
                                let __currStyles = (ReactXP.Styles.Runtime.findApplicableStyles __mergedStyles __currClass)
                                let __implicitProps = [
                                    if __currClass <> "" then ("ClassName", __currClass :> obj)
                                    if (not __currStyles.IsEmpty) then ("__style", __currStyles :> obj)
                                ]
                                (ReactXP.Styles.Runtime.injectImplicitProps __implicitProps __currExplicitProps)
                            )
                            []
                    ) |> RenderResult.Make
                    (fun (__sibI, __sibC, __pFQN) ->
                        let __parentFQN = Some "Components.Something"
                        Components.Something.Make
                            (
                                let __currExplicitProps =
                                    (Components.TypeExtensions.TEs.MakeSomethingProps(
                                        pValue = (Components.Something.PropValueFactory.Make("abc"))
                                    ))
                                let __currClass = (nthChildClasses __sibI __sibC)
                                let __currStyles = (ReactXP.Styles.Runtime.findApplicableStyles __mergedStyles __currClass)
                                let __implicitProps = [
                                    if __currClass <> "" then ("ClassName", __currClass :> obj)
                                    if (not __currStyles.IsEmpty) then ("__style", __currStyles :> obj)
                                ]
                                (ReactXP.Styles.Runtime.injectImplicitProps __implicitProps __currExplicitProps)
                            )
                            []
                    ) |> RenderResult.Make
                    (fun (__sibI, __sibC, __pFQN) ->
                        let __parentFQN = Some "Components.Something"
                        Components.Something.Make
                            (
                                let __currExplicitProps =
                                    (Components.TypeExtensions.TEs.MakeSomethingProps(
                                        pValue = (Components.Something.PropValueFactory.MakeSpecial("abc"))
                                    ))
                                let __currClass = (nthChildClasses __sibI __sibC)
                                let __currStyles = (ReactXP.Styles.Runtime.findApplicableStyles __mergedStyles __currClass)
                                let __implicitProps = [
                                    if __currClass <> "" then ("ClassName", __currClass :> obj)
                                    if (not __currStyles.IsEmpty) then ("__style", __currStyles :> obj)
                                ]
                                (ReactXP.Styles.Runtime.injectImplicitProps __implicitProps __currExplicitProps)
                            )
                            []
                    ) |> RenderResult.Make
                ]
                __list |> RenderResult.ToRawElements __parentFQN
            )
    ) |> RenderResult.Make
    |> RenderResult.ToRawElementsSingle __parentFQN |> RenderResult.ToSingleElement