import * as glob from "glob-promise";
import * as path from "path";

import { Seq, QQQ } from "eggshell-lib-lang-typescript";

import { EggShellProject } from "eggshell-lib-eggshell";
import { deriveAppImageFilesGlobbingPattern, deriveLibImageFilesGlobbingPattern, writeFileIfContentHasChanged } from "./filesPathsAndNames"

async function generateLocalImagesRegistration(project: EggShellProject): Promise<string> {
    const namespace = project.config.name

    const filenamesApp: Seq<string> = await glob(deriveAppImageFilesGlobbingPattern(project.rootPath));
    const filenamesLib: Seq<string> = await glob(deriveLibImageFilesGlobbingPattern(project.rootPath));

    const truncatedFilenames =
        [].concat(
            filenamesApp.map(filename => path.relative(project.rootPath, filename)),
            filenamesLib.map(filename => path.relative(path.join(project.rootPath, "public-dev"), filename))
        )

    const registerCalls: Seq<string> = truncatedFilenames.sort().map(rawFilename => {
        const filename = rawFilename.split("\\").join("/");
        return [
            `    | "/${filename}" ->`,
            `        #if EGGSHELL_PLATFORM_IS_WEB`,
            `            ImageSource.restricted_ofWebRelativePath filename`,
            `        #else`,
            `            ImageSource.restricted_ofNativeImport (importDefault "\${entryDir}/../.build/native/assets/public-dev/${filename}")`,
            `        #endif`,
        ].join("\n")
    });

    const body = [
        `module ${namespace}.LocalImages`,
        ``,
        `// AUTOGENERATED FILE, DO NOT EDIT MANUALLY`,
        ``,
        `open Fable.Core.JsInterop`,
        ``,
        `open LibClient`,
        `open LibClient.Services.ImageService`,
        ``,
        `let localImage (filename: string) : ImageSource =`,
        `    match filename with`,
        ``,
        `${registerCalls.join("\n\n")}`,
        `    | _ ->`,
        `            Log.Error (sprintf "Image '%s' not found, at least not by the eggshell glob pattern. Maybe restart eggshell to see if that fixes the problem?" filename)`,
        ``,
        `        #if EGGSHELL_PLATFORM_IS_WEB`,
        `            ImageSource.restricted_ofWebRelativePath "/images/image-not-found.png"`,
        `        #else`,
        `            // TODO fix this when dealing with native relative images`,
        `            ImageSource.restricted_ofNativeImport (importDefault "\${entryDir}/../.build/native/assets/public-dev/images/image-not-found.png")`,
        `        #endif`,


    ].join("\n")

    return body;
}

export async function writeLocalImagesRegistration(project: EggShellProject): Promise<void> {
    const code = await generateLocalImagesRegistration(project)
    const filename = `${project.srcPath}/LocalImagesRegistration.fs`;
    return writeFileIfContentHasChanged(filename, code).then(_ => {});
}
