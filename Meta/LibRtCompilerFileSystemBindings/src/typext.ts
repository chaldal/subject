import * as fs from "fs-extra";
import * as glob from "glob-promise";

import { Seq, QQQ } from "eggshell-lib-lang-typescript";
import { fsPlus, childProcessPlus } from "eggshell-lib-node";
import { EggShellProject } from "eggshell-lib-eggshell";

import { deriveDestinationFilename, deriveComponentName, deriveFsComponentFilesGlobbingPattern, writeFileIfContentHasChanged } from "./filesPathsAndNames"


export async function generateTypeExtensions(project: EggShellProject, rtCompilerCmd: string, sourceFilename: string) : Promise<void> {
	const componentLibraryAliasesSerialized = project.config.render.componentLibraryAliases.map(_ => _.join("=")).join(";");
    const command = `"${rtCompilerCmd}" RecordsWithDefaults "${deriveComponentName(sourceFilename)}" "${project.config.alias}" "${componentLibraryAliasesSerialized}" `;

    var sourceContents = await fs.readFile(sourceFilename, "utf8");

    // Remove any UTF-8 BOM. See https://github.com/nodejs/node-v0.x-archive/issues/1918#issuecomment-2480359.
    sourceContents = sourceContents.replace(/^\uFEFF/, '');

    const { stdout } = await childProcessPlus.exec(command, undefined, sourceContents);

    const destinationFilename = deriveDestinationFilename(sourceFilename, project.srcPath, project.autogeneratedPath).replace(/\.typext.fs$/, ".TypeExtensions.fs");

    try {
        fsPlus.ensureDirectoryExistsSync(destinationFilename);
    }
    catch (err) {
        if (err && err.code === "EEXIST") {
            // NO-OP, during parallel executions, race conditions are possible, and this
            // library function appears to be have been written by a n0ob who doesn't understand
            // concurrency.
            // Multiple render files are run in parallel for different files
            // (as the current compliler is designed to)
            // likely this function is internally implemented as:
            // if(!directoryExists) createDirectory
            // But the directory could gotten created in between two statements by a parallel
            // render process
        }
        else {
            throw err;
        }
    }

    const written =
        await writeFileIfContentHasChanged(destinationFilename, stdout)
            .catch(err => {
                return Promise.reject({
                    message: "Error in writing compiled type extensions file",
                    destinationFilename,
                    err,
                });
            });

    console.log(`${written ? "Compiled" : "Skipped"} ${sourceFilename}`);
}

export async function processAllTypeExtensions(project: EggShellProject, rtCompilerCmd: string): Promise<void> {
    console.log("Going to compile .typext.fs files...");
    const filenames: Seq<string> = await glob(deriveFsComponentFilesGlobbingPattern(project.srcPath));
    await Promise.all(
        filenames.map(filename => {
            return generateTypeExtensions(project, rtCompilerCmd, filename);
        }
    ));
}
