import * as fs       from "fs";
import * as gulp     from "gulp";
import * as path     from "path";
import * as inquirer from "inquirer";
import * as _        from "lodash";

import { QQQ, Seq, ifMatch, Promises } from "eggshell-lib-lang-typescript";

import { Project } from "eggshell-lib-eggshell";
import { getTemplatesDir, templateFile } from "../templating";
import { validatePascalCase } from "../inquirerHelpers";

type Answers = {
    name: string
}

export function createDialog(closestUptreeProject: Project) : Promise<void> {
    if (closestUptreeProject.type !== 'app' && closestUptreeProject.type !== 'library') {
        return Promise.reject("Can only create component in an app or library, check your pwd");
    }

    return getTemplatesDir(closestUptreeProject)
    .match(
        async (templatesDir) => {
            const answers: Answers = await inquirer.prompt([
                {
                    name:     "name",
                    type:     "input",
                    message:  "Dialog name",
                    validate: validatePascalCase,
                },
            ]);
            let dialogName = answers.name.startsWith("Dialog")
                           ? answers.name.substr(6)
                           : answers.name
            return actuallyCreateDialog(dialogName, closestUptreeProject.config.name, closestUptreeProject.srcPath, templatesDir);
        },
        Promise.reject
    );
}

async function actuallyCreateDialog(dialogName: string, appName: string, srcDir: string, templatesDir: string) : Promise<void> {
    const data = {
        appName,
        dialogName,
    };

    const componentDirectory = path.join(srcDir, "Components", "Dialog", dialogName);

    if (fs.existsSync(componentDirectory)) {
        return Promise.reject(`Directory for component name already exists: ${componentDirectory}`)
    }

    await Promises.inSeries([
        templateFile(gulp, `${templatesDir}/dialog/Dialog.render.template`,    `${componentDirectory}/${dialogName}.render`,    data),
        templateFile(gulp, `${templatesDir}/dialog/Dialog.typext.fs.template`, `${componentDirectory}/${dialogName}.typext.fs`, data),
        templateFile(gulp, `${templatesDir}/dialog/Dialog.styles.fs.template`, `${componentDirectory}/${dialogName}.styles.fs`, data),
    ]);

    console.log(generateFinalMessage(appName, dialogName));
}

function generateFinalMessage(appName: string, dialogName: string) : string {
    const rawLines: Seq<string | Seq<string>> = [
        "",
        "",
        "",
        "Dialog component created.",
        "",
        "Now you need to add it to your .fsproj file, together with other dialogs.",
        "This part isn't automated yet, sorry.",
        "",
        "",
        `    <Compile Include=\"Components/Dialog/${dialogName}/${dialogName}.typext.fs\" />`,
        `    <Compile Include=\"Components/Dialog/${dialogName}/${dialogName}.styles.fs\" />`,
        `    <Compile Include=\"_autogenerated_/Components/Dialog/${dialogName}/${dialogName}.TypeExtensions.fs\" />`,
        `    <Compile Include=\"_autogenerated_/Components/Dialog/${dialogName}/${dialogName}.Render.fs\" />`,
        "",
        "",
        "Next, go to Navigation.fs and add your dialog into either the ResultfulDialog or ResultlessDialog type:",
        "",
        `| ${dialogName} of SomeParam: int`,
        "",
        "",
        "And finally, go to your App.render, and add your dialog's case to either MakeResultless or MakeResultful prop of the LR.Dialogs component:",
        "",
        `<rt-case is='${dialogName} someParam'>{=${appName}.Components.Dialog.${dialogName}.Open someParam close }</rt-case>`,
        "",
        "",
    ]
    .filter(_ => _ !== undefined);

    return _.flatten(rawLines).join("\n");
}