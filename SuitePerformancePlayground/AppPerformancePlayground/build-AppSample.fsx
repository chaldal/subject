#if !FAKE_BUILD_FSPROJ
#load "../../Fake/Includes.fsx"
#load "../../Meta/AppRenderDslCompiler/build-AppRenderDslCompiler.fsx"
#load "../../Meta/AppEggshellCli/build-AppEggshellCli.fsx"
#load "../../build-AllLibraries.fsx"
#load "../../LibClient/build-LibClient.fsx"
#load "../../LibRouter/build-LibRouter.fsx"
#load "../../LibUiAdmin/build-LibUiAdmin.fsx"
#load "../../LibUiSubject/build-LibUiSubject.fsx"
#load "../../LibUiSubjectAdmin/build-LibUiSubjectAdmin.fsx"
#endif

namespace Egg.Shell.SuitePerformancePlayground.AppSample

module Build =
    open Fake.IO
    open Fake.DotNet
    open Fake.Core
    open Egg.Shell.Fake

    type Target =
    | InitializeDependencies
    | Clean
    | RestoreApp
    | EggShellPackageForWeb
    | InstallPackageDependencies

    // TODO: not convinced we should expose eggshell so generically - we might be better off with a DevWeb target, for example. Time will tell.
    | Eggshell of Command: string

    // TODO: don't think we'll need this target, but leaving in for now
    | RunServer of BackendUrl: string * AppUrlBase: string * Port: string

    let targetFactory =
        BuildFile.forPath __SOURCE_DIRECTORY__ __SOURCE_FILE__
        |> BuildFile.withTargetsFromUnionType
        |> BuildFile.withDefinition (fun buildContext normalizeDir ->
            function
            | InitializeDependencies ->
                NodeNpm.install buildContext

                Shell.rm_rf (normalizeDir "./fsharplint.json")
                Shell.rm_rf (normalizeDir "./.vscode/renderdsl.code-snippets")
                Shell.rm_rf (normalizeDir "./public-dev/images")
                Shell.rm_rf (normalizeDir "./public-dev/configSourceOverrides.dev.js")

                Shell.mkdir(normalizeDir "./.vscode")

                [
                    ("./.vscode/renderdsl.code-snippets", "../../Meta/renderdsl.code-snippets")
                    ("./fsharplint.json", "../../Meta/fsharplint.json")
                    ("./public-dev/images", "./images")
                    ("./public-dev/configSourceOverrides.dev.js", "./configSourceOverrides.dev.js")
                ]
                |> List.map (fun (relativePath, relativeTargetPath) -> (normalizeDir relativePath, normalizeDir relativeTargetPath))
                |> List.iter (fun (path, targetPath) -> FileSystemHelper.CreateSymbolicLink path targetPath)

            | Clean ->
                Shell.rm_rf (normalizeDir "./node_modules")
                Shell.rm_rf (normalizeDir "./src/_autogenerated_")
                Shell.rm_rf (normalizeDir "./src/obj")
                Shell.rm_rf (normalizeDir "./src/bin")
                Shell.rm_rf (normalizeDir Constants.buildRootPath)
            | RestoreApp ->
                DotNetEx.restore (fun restoreOptions ->
                    { restoreOptions with
                        Common =
                            { restoreOptions.Common with
                                Verbosity = Some DotNet.Verbosity.Quiet }
                        Runtime = Some currentDotNetRuntimeIdentifier
                     }) (normalizeDir ".")

            | EggShellPackageForWeb ->
                EggShellCli.packageWeb buildContext

            | InstallPackageDependencies ->
                let buildContext = {
                    buildContext with
                        NormalizePath =
                            fun path ->
                                normalizeDir $"{Constants.webPackagePath}/{path}"
                }
                NodeNpm.install buildContext

            | RunServer (backendUrl, appUrlBase, port) ->
                CreateProcess.fromRawCommandLine "node" "server.js"
                |> CreateProcess.withWorkingDirectory (buildContext.NormalizePath Constants.webPackagePath)
                |> CreateProcess.setEnvironmentVariable "EGGSHELL_HttpPort" port
                |> CreateProcess.setEnvironmentVariable "EGGSHELL_AppUrlBase" appUrlBase
                |> CreateProcess.setEnvironmentVariable "EGGSHELL_BackendUrl" backendUrl
                |> CreateProcess.ensureExitCode
                |> Proc.run
                |> ignore

            | Eggshell command ->
                EggShellCli.execute buildContext command
            )
        |> BuildFile.withDefaultTarget InitializeDependencies
        |> BuildFile.withExternalDependency Egg.Shell.Meta.AppRenderDslCompiler.Build.targetFactory
            (Egg.Shell.Meta.AppRenderDslCompiler.Build.Target.Link >=> InitializeDependencies)
        |> BuildFile.withExternalDependency Egg.Shell.Meta.AppEggshellCli.Build.targetFactory
            (Egg.Shell.Meta.AppEggshellCli.Build.Build >=> EggShellPackageForWeb)
        |> BuildFile.withInternalDependency (InitializeDependencies >=> EggShellPackageForWeb)
        |> BuildFile.withInternalDependency (RestoreApp >=> EggShellPackageForWeb)
        |> BuildFile.withExternalDependency Egg.Shell.Build.targetFactory
            (Egg.Shell.Build.InitializeDependenciesForAllLibraries >=> EggShellPackageForWeb)

        // InitializeDependencies
        |> BuildFile.withExternalDependency Egg.Shell.Meta.AppEggshellCli.Build.targetFactory
            (Egg.Shell.Meta.AppEggshellCli.Build.Build >=> InitializeDependencies)
        |> BuildFile.withExternalDependency Egg.Shell.LibClient.Build.targetFactory
            (Egg.Shell.LibClient.Build.EggShellBuildLib >=> InitializeDependencies)
        |> BuildFile.withExternalDependency Egg.Shell.LibRouter.Build.targetFactory
            (Egg.Shell.LibRouter.Build.EggShellBuildLib >=> InitializeDependencies)
        |> BuildFile.withExternalDependency Egg.Shell.LibUiAdmin.Build.targetFactory
            (Egg.Shell.LibUiAdmin.Build.InitializeDependencies >=> InitializeDependencies)
        |> BuildFile.withExternalDependency Egg.Shell.LibUiSubject.Build.targetFactory
            (Egg.Shell.LibUiSubject.Build.InitializeDependencies >=> InitializeDependencies)
        |> BuildFile.withExternalDependency Egg.Shell.LibUiSubjectAdmin.Build.targetFactory
            (Egg.Shell.LibUiSubjectAdmin.Build.InitializeDependencies >=> InitializeDependencies)
        |> BuildFile.withExternalDependency Egg.Shell.ThirdParty.Map.Build.targetFactory
            (Egg.Shell.ThirdParty.Map.Build.InitializeDependencies >=> InitializeDependencies)
        |> BuildFile.withExternalDependency Egg.Shell.ThirdParty.Recharts.Build.targetFactory
            (Egg.Shell.ThirdParty.Recharts.Build.InitializeDependencies >=> InitializeDependencies)

        |> BuildFile.withInternalDependency (EggShellPackageForWeb >=> InstallPackageDependencies)
        |> BuildFile.withInternalDependencyBuilder (function | Eggshell _ -> Some InitializeDependencies | RunServer _ -> Some InstallPackageDependencies | _ -> None)
        |> BuildFile.initialize
