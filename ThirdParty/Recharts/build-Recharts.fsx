#if !FAKE_BUILD_FSPROJ
#load "../../Fake/Includes.fsx"
#load "../../Meta/AppRenderDslCompiler/build-AppRenderDslCompiler.fsx"
#load "../../Meta/AppEggshellCli/build-AppEggshellCli.fsx"
#endif

namespace Egg.Shell.ThirdParty.Recharts

module Build =
    open Fake.IO
    open Egg.Shell.Fake

    type Target =
    | InitializeDependencies
    | Clean
    | EggShellBuildLib

    // TODO: not convinced we should expose eggshell so generically - we might be better off with a DevWeb target, for example. Time will tell.
    | Eggshell of Command: string

    let targetFactory =
        BuildFile.forPath __SOURCE_DIRECTORY__ __SOURCE_FILE__
        |> BuildFile.withTargetsFromUnionType
        |> BuildFile.withDefinition (fun buildContext normalizeDir ->
            function
            | InitializeDependencies ->
                NodeNpm.install buildContext

            | Clean ->
                Shell.rm_rf (normalizeDir "./node_modules")
                Shell.rm_rf (normalizeDir "./src/_autogenerated_")
                Shell.rm_rf (normalizeDir "./src/obj")
                Shell.rm_rf (normalizeDir "./src/bin")

            | EggShellBuildLib ->
                EggShellCli.buildLib buildContext

            | Eggshell command ->
                EggShellCli.execute buildContext command
            )
        |> BuildFile.withDefaultTarget InitializeDependencies
        |> BuildFile.withExternalDependency Egg.Shell.Meta.AppRenderDslCompiler.Build.targetFactory
            (Egg.Shell.Meta.AppRenderDslCompiler.Build.Target.Link >=> InitializeDependencies)
        |> BuildFile.withExternalDependency Egg.Shell.Meta.AppEggshellCli.Build.targetFactory
            (Egg.Shell.Meta.AppEggshellCli.Build.Build >=> EggShellBuildLib)
        |> BuildFile.withInternalDependency (InitializeDependencies >=> EggShellBuildLib)
        |> BuildFile.withInternalDependencyBuilder (function | Eggshell _ -> Some InitializeDependencies | _ -> None)
        |> BuildFile.initialize
